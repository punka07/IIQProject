<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="COB-Workflow-Joiner" type="IdentityLifecycle">
  <Variable input="true" name="trigger"/>
  <Variable input="true" name="event"/>
  <Variable initializer="joiner" name="LCMEvent"/>
  <Variable initializer="false" name="trace"/>
  <Variable input="true" name="identityName"/>
  <Variable input="true" name="launcher"/>
  <Variable input="true" name="source">
    <Script>
      <Source><![CDATA[
		return workflow.getName();
      ]]></Source>
    </Script>
  </Variable>
  <Variable name="plan"/>
  <Variable name="project"/>
  <Variable editable="true" input="true" name="liAttributesMissing">
    <Script>
      <Source><![CDATA[
		import java.util.ArrayList;
		import java.util.List;
		List liAttributesMissing = new ArrayList();
			]]></Source>
    </Script>
  </Variable>
  <Variable name="hasNoAD">
    <Script>
      <Source><![CDATA[

import sailpoint.object.Identity;
import sailpoint.object.Link;
import java.util.List;
      
        
        boolean hasNoAD = true;
        Identity identity = context.getObjectByName(Identity.class,identityName);     
        if(identity != null){
        List allLinks = identity.getLinks();
       
        for(Link link:allLinks){
            if(link.getApplication().getName().equals("Dev_CityHall_AD") || link.getApplication().getName().equals("Dev_BPS_AD")){
                hasNoAD = false;
                break;
            }
            
        }
      }
      return hasNoAD;
      
    ]]></Source>
    </Script>
  </Variable>
  <Variable name="hasNoHDAP">
    <Script>
      <Source><![CDATA[

import sailpoint.object.Identity;
import sailpoint.object.Link;
import java.util.List;
      
        
        boolean hasNoHDAP = true;
        Identity identity = context.getObjectByName(Identity.class,identityName);     
        if(identity != null){
        List allLinks = identity.getLinks();
       
        for(Link link:allLinks){
            if(link.getApplication().getName().equals("Dev_HDAP")){
                hasNoHDAP = false;
                break;
            }
            
        }
      }
      return hasNoHDAP;
      
    ]]></Source>
    </Script>
  </Variable>
  <Variable name="isBPSEmployee">
    <Script>
      <Source><![CDATA[
  import sailpoint.object.Identity;
   
    Identity ident = context.getObjectByName(Identity.class,identityName);    
    boolean isBPSEmployee = isBPSRequest(ident);
    return isBPSEmployee;
    
     ]]></Source>
    </Script>
  </Variable>
  <Variable name="isCHEmployee">
    <Script>
      <Source><![CDATA[
     import sailpoint.object.Identity;

        Identity ident = context.getObjectByName(Identity.class,identityName);
        return isCHRequest(ident);
    
     ]]></Source>
    </Script>
  </Variable>
  <Variable name="isHDAPProv">
    <Script>
      <Source><![CDATA[
      
      boolean isHDAPProv=false;
      if( hasNoHDAP && isCHEmployee){
      isHDAPProv=true;
      }
      
      return isHDAPProv;
    ]]></Source>
    </Script>
  </Variable>
  <Variable name="email">
    <Script>
      <Source><![CDATA[
    import sailpoint.object.Identity;
    
    
        String email="";
        Identity ident = context.getObjectByName(Identity.class,identityName);
        String firstname=ident.getFirstname();
        String firstname=ident.getLastname();
        
        /**Check if email attribute is populated**/
        if(ident.getEmail() != null){
            email=ident.getEmail();
        }else {
            /**If the email attribute doesn't exist generate an email address**/
            if (isBPSEmployee) {
                email=generateUniqueEmailAddress("Dev_BPS_AD",firstName,lastName,context);
                ident.setEmail(email);
            } else {
                email=generateUniqueEmailAddress("Dev_CityHall_AD",firstName,lastName,context);
                ident.setEmail(email);
              
            }
        }
    ]]></Source>
    </Script>
  </Variable>
  <Variable editable="true" name="defaultPassword">
    <Description>defaultPassword stores the onetime default password for
			all the systems like AD/FIN/HDAP</Description>
    <Script>
      <Source><![CDATA[
    import sailpoint.object.Identity;
        
        
        Identity ident = context.getObjectByName(Identity.class,identityName);
		    String defaultPassword=getPasswordFor_S_Account();
        ident.setPassword(defaultPassword);
        return defaultPassword;
			]]></Source>
    </Script>
  </Variable>
  <Variable input="true" name="approvalSet">
    <Description>This attributes is set during the "Build Approval Set"
			step,
			which builds this list by going through the ProvisioningPlan
			to build the line items that need to be approved,</Description>
  </Variable>
  <Variable editable="true" name="result"/>
  <Description>This workflow is for provisioning birthright access to the
		Joiners in the organization. Various accesses are AD and HDAP. Based
		on several business logics, accesses are provided to the joiner in the
		organization.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-AuditRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-AuditRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-SpAcctProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start">
    <Transition to="Step0"/>
  </Step>
  <Step icon="Default" name="Step0" posX="17" posY="104" resultVariable="workflowLogPrefix">
    <Script>
      <Source><![CDATA[
      	String workflowLogPrefix = workflow.getName() + "::" + identityName + "::"; 
		return workflowLogPrefix;
	  ]]></Source>
    </Script>
    <Transition to="GetPSLinks" when="isCHEmployee"/>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="GetPSLinks" posX="98" posY="10" resultVariable="psLinks">
    <Script>
      <Source><![CDATA[
		String logPrefix = workflow.getName() + "::" + identityName + "::" + wfcontext.getStep().getName() + "::";
		log.debug(logPrefix);
		IdentityService is = new IdentityService(context);
		Application PSApp = context.getObjectByName(Application.class, "Dev_PeopleSoftHCM");
		sailpoint.object.Identity identityObject = context.getObjectByName(Identity.class, identityName);      
		List psLinks = is.getLinks(identityObject, PSApp);
		String numberOfSdsLinks = psLinks == null ? "null" : Integer.toString(psLinks.size());
		
		return psLinks;
	  ]]></Source>
    </Script>
    <Transition to="Stop" when="script:Util.isEmpty(psLinks)"/>
    <Transition to="AuditMissingPSLink" when="script:psLinks.size() != 1"/>
    <Transition to="IsActiveAccount"/>
  </Step>
  <Step icon="Default" name="AuditMissingPSLink" posX="98" posY="10">
    <Description>
			TODO implement Audit logic for incorrect number of PS links
		</Description>
    <Script>
      <Source><![CDATA[
		String logPrefix = workflow.getName() + "::" + identityName + "::" + wfcontext.getStep().getName() + "::";
		log.debug(logPrefix);
		String numberOfPsLinks = psLinks == null ? "null" : Integer.toString(psLinks.size());
		throw new GeneralException("Incorrect number of PS links found:" + numberOfPsLinks);
	  ]]></Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="IsActiveAccount" posX="17" posY="104" resultVariable="isActiveAccount">
    <Script>
      <Source><![CDATA[
		String logPrefix = workflow.getName() + "::" + identityName + "::" + wfcontext.getStep().getName() + "::";
		boolean isActiveAccount = false;
		String cobEmployeeStatusCode = null;
		Link psLink = (Link) psLinks.iterator().next();
		if (psLink != null) {
			if (psLink.getAttributes() != null) {
				cobEmployeeStatusCode = psLink.getAttribute("EMPL_STATUS");
				isActiveAccount = isCollectionContainsStringIC(getActiveStatusList(), cobEmployeeStatusCode);
			}
		}
		log.debug(logPrefix+" "+"EndStep::isActiveAccount=" + isActiveAccount + "::cobEmployeeStatusCode=" + cobEmployeeStatusCode);
		return isActiveAccount;
	  ]]></Source>
    </Script>
    <Transition to="AD_Provision" when="hasNoAD"/>
    <Transition to="HDAP_Provision" when="isHDAPProv"/>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Message" name="AD_Provision" posX="653" posY="376" resultVariable="plan">
    <Arg name="result"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="project"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="LCMEvent" value="ref:LCMEvent"/>
    <Arg name="email" value="ref:email"/>
    <Arg name="defaultPassword" value="ref:defaultPassword"/>
    <Arg name="isBPSEmployee" value="ref:isBPSEmployee"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="COB-Workflow-AD-Create-Employee"/>
    </WorkflowRef>
    <Transition to="RefreshIdentityAfterAD"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="RefreshIdentityAfterAD" posX="539" posY="378" wait="2">
    <Arg name="refreshLinks" value="true"/>
    <Arg name="forceLinkAttributePromotion" value="true"/>
    <Arg name="synchronizeAttributes" value="true"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="promoteAttributes" value="true"/>
    <Description>
			Only synchronize attributes for this one specific Identity and refresh
			Links.
			TODO add when="script: return
			wfcontext.getRootWorkflowCase().getMessages()==null;"
		</Description>
    <Transition to="HDAP_Provision" when="hasNoHDAP"/>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="HDAP_Provision" posX="432" posY="379" resultVariable="plan">
    <Arg name="result"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="email" value="ref:email"/>
    <Arg name="defaultPassword" value="ref:defaultPassword"/>
    <Arg name="isBPSEmployee" value="ref:isBPSEmployee"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="COB-Workflow-HDAP-Create-Employee"/>
    </WorkflowRef>
    <Transition to="Refresh_Identity_After_HDAP"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh_Identity_After_HDAP" posX="432" posY="455" wait="2">
    <Arg name="refreshLinks" value="true"/>
    <Arg name="forceLinkAttributePromotion" value="true"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="promoteAttributes" value="true"/>
    <Description>
			Add arguments as necessary to enable refresh features. Typically you
			only want this to correlate roles. Don't ask for provisioning since
			that
			can result in provisioning policies that need to be presented and it's
			too late for that. This is only to get role detection and exception
			entitlements in the cube.
			TODO add when="script: return
			wfcontext.getRootWorkflowCase().getMessages()==null;"
		</Description>
    <Transition to="Send Notifications"/>
  </Step>
  <Step name="Send Notifications" posX="1130" posY="107">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="joinerEmail" value="ref:email"/>
    <Arg name="isBPSEmployee" value="ref:isBPSEmployee"/>
    <Arg name="defaultPassword" value="ref:defaultPassword"/>
    <Script>
      <Source><![CDATA[
	  	import java.util.*;
		import sailpoint.object.EmailTemplate;
		import sailpoint.object.EmailOptions;
		import java.util.Map;
		import java.util.HashMap;
		import java.text.DateFormat;
		import java.text.SimpleDateFormat;		
		import sailpoint.object.*;
		import sailpoint.server.Auditor;

		String logPrefix = workflow.getName() + "::" + identityName + "::" + wfcontext.getStep().getName() + "::";
		Identity newJoiner = context.getObject(Identity.class, identityName);
        String managerDisplayName = "";
		List emails = new ArrayList();
		Identity manager=
		if (manager != null) {
      managerDisplayName=manager.getDisplayName();
			String managerEmail = (String) manager.getAttribute("email");
			emails.add(managerEmail);
		}

		if (requestor != null) {
			Identity requestorIdn = context.getObject(Identity.class, requestor);
			if (requestorIdn != null) {
				if (requestorIdn.getAttribute("email") != null) {
			      requestorEmail = (String) requestorIdn.getAttribute("email");
					if (requestorEmail != null) {
						emails.add(requestorEmail);
					}
				}
			}
		}

		Map variables = new HashMap();
    variables.put("managerDisplayName",managerDisplayName);
    variables.put("identityModel", identityModel);
    variables.put("accountType", identityModel.get("accountType"));
		variables.put("firstName", identityModel.get("firstName"));
		variables.put("lastName", identityModel.get("lastName"));
		if(isBPSRequest){
        variables.put("userName", "selbmum" + "\\" + sAMAccountName);
        }else{
		variables.put("userName", "IAM-AD-DEV" + "\\" + sAMAccountName);
        }
		variables.put("email", identityModel.get("email"));
		variables.put("endDate", identityModel.get("contractEndDate"));
		variables.put("userPassword", identityModel.get("defaultPassword"));
		variables.put("requesterDisplayName", requesterDisplayName);
		//variables.put("defaultSecurityMessage", wfcontext.getVariable("defaultSecurityMessage"));

		boolean sendEmail = false;
		if (Util.size(user.getLinks()) != 0) {
			sendEmail = true;
		}

		if (sendEmail) {
			String accountInfoTemplate = "COB-EmailTemplate-EmployeeAcctInfo";
			String passwordInfoTemplate = "COB-EmailTemplate-EmployeeAcct-ADPassword";
     
        
      EmailTemplate infoEmailTemplate = context.getObjectByName(EmailTemplate.class,accountInfoTemplate);
      EmailTemplate pswdEmailTemplate = context.getObjectByName(EmailTemplate.class,passwordInfoTemplate);
      

        
	  EmailOptions emailOptions= new EmailOptions();
      emailOptions.setVariables(variables);
      emailOptions.setTo(emails);
      emailOptions.setSendImmediate(true);
     
        
      context.sendEmailNotification(infoEmailTemplate, emailOptions);
      context.sendEmailNotification(pswdEmailTemplate, emailOptions);
      
		}
		
			log.warn("Email Sent");
	  ]]></Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Contractor" posX="312" posY="64">
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="1101" posY="221"/>
  <Step catches="complete" icon="Catches" name="HandleException" posX="37" posY="690">
    <Script>
      <Source><![CDATA[
				String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() +
				"::";
				try {
				cobLog(logPrefix, "EnterStep");
				if(!wfcontext.getWorkflowCase().getErrors().isEmpty()){
				sendErrorEmailFromWorkflow(wfcontext);
				}
				cobLog(logPrefix,
				"ExitStep");
				}
				catch (Throwable e) {
				cobLog(logPrefix, "Exception:");
				e.printStackTrace();
				}
			]]></Source>
    </Script>
  </Step>
</Workflow>
