<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,LCM,IdentityRequest" name="COB-Workflow-Application-AccessRequest">
  <Variable initializer="AccessRequest" input="true" name="flow"/>
  <Variable initializer="true" name="transient">
    <Description>Set to false to cause workflow-related objects, such as
			approval
			work items, to be saved in the database even if they are only
			viewed by the person registering.</Description>
  </Variable>
  <Variable initializer="identityModel" name="basePath">
    <Description>The form path to the link we are interested in editing.</Description>
  </Variable>
  <Variable editable="true" name="optimisticProvisioning">
    <Description>Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.</Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>Normally provisioning is done in a step that uses the &amp;quot;background&amp;quot;
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to
      see the results of the request.</Description>
  </Variable>
  <Variable name="requestee"/>
  <Variable name="launcher"/>
  <Variable name="identityModel"/>
  <Variable name="identityName"/>
 <Variable name="deptHead"/>
 <Variable name="deptHeadDisplayName"/>
 <Variable name="hasFinAcct"/>
 <Variable name="requesterEmail"/>
  <Variable name="identityRequestId"/>
  <Variable name="identityRequest"/>
  <Variable initializer="string:true" name="trace"/>
  <Variable name="approvalSet" output="true">
    <Description>This attribute is set during the "BuildApprovalSet" step,
			which builds this list by going through the ProvisioningPlan
			to build the line items that need to be approved.

			This variable includes all ApprovalItems that are part of
			the request process and is updated during the AfterScript
			of the approval process by assimilating the decisions
			and comments from the Approvals copy of the ApprovalItem.</Description>
  </Variable>
  <Variable name="requestRejected"/>
  <Variable initializer="COB-Workgroup-Treasury" name="treasuryWkgrp"/>
  <Variable initializer="COB-Workgroup-Auditing" name="auditingWkgrp"/>
  <Variable name="appName"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-AuditRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-SpAcctProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="12" resultVariable="workflowLogPrefix">
    <Script>
      <Source><![CDATA[
            import sailpoint.object.Application;
            import sailpoint.tools.Util;

      	String workflowLogPrefix = workflow.getName() + "::requestedBy::" + launcher + "::"; 
		System.out.println("workflowLogPrefix::"+ workflowLogPrefix);
		return workflowLogPrefix;
	]]></Source>
    </Script>
    <Transition to="Build Identity Model"/>
  </Step>
  <Step action="call:getIdentityModel" icon="Task" name="Build Identity Model" posX="146" resultVariable="identityModel">
    <Arg name="identityId">
      <Script>
        <Source><![CDATA[
				return null;
		  ]]></Source>
      </Script>
    </Arg>
    <Arg name="identityName" value="ref:identityName"/>
    <Description>
			For now, build a map of the data. Eventually this will use the Identity
			transformer to build a Map based on an existing identityName, or
			Identity object.
		</Description>
		<Transition to="Select Beneficiary"/>
		</Step>
		  <Step name="Select Beneficiary">
    <Approval name="AccessRequest-SelectBeneficiary-Approval" owner="ref:launcher" return="requestee" send="">
      <Form name="AccessRequest-SelectBeneficiary-Form">
        <Attributes>
          <Map>
            <entry key="pageTitle" value="Select Beneficiary"/>
          </Map>
        </Attributes>
        <Button action="next" label="Next"/>
        <Button action="cancel" label="Cancel Request"/>
        <Section label="" name="userInstructions" type="text">
          <Field name="Directions" value="Select the beneficiary from the drop-down below."/>
        </Section>
        <Section columns="1" label="">
          <Field displayName="Requestee" displayType="combobox" name="requestee" required="true" type="identity"/>
        </Section>
      </Form>
    </Approval>
    <Transition to="Get workflow variables" when="approved"/>
    <Transition to="end" when="!approved"/>
  </Step>
  <Step name="Get workflow variables">
  <Arg name="requestee" value="ref:requestee"/>
   <Arg name="hasFinAcct">
  <Script>
  <Source>
  import sailpoint.object.Identity;
  import sailpoint.tools.GeneralException;
  
  try{
   Identity ident = context.getObjectById(Identity.class,requestee);
   String identityName = ident.getName();
   boolean hasFinAcct= hasFinAcct(identityName);
   wfcontext.setVariable("hasFinAcct",hasFinAcct);
   wfcontext.setVariable("identityName",ident.getName());
   return hasFinAcct;
   }catch(GeneralException e) {
    	 log.warn("General Exception::"+e.getMessage());
     }catch(NullPointerException e1) {
    	 log.warn("NullPointer Exception::"+e1.getMessage()); 
     }
  </Source>
  </Script>
  </Arg>
   <Arg name="deptHead">
  <Script>
  <Source><![CDATA[
  		import sailpoint.object.Identity;
  		import sailpoint.object.Custom;
  		import java.util.Map;
  		import sailpoint.tools.GeneralException;
  		
  		try{
  		String deptHead="";
		Identity ident = context.getObject(Identity.class, requestee);
        Custom customObj = context.getObjectByName(Custom.class,"COB-Custom-DeptHead-Mapping");
        Map deptHeadsMap=customObj.get("Dept-DeptHeads");
		if (ident != null && customObj != null) {
			String deptCode = (String) ident.getAttribute("departmentCode");
			if (deptCode != null && deptHeadsMap.containsKey(deptCode)) {
				deptHead=deptHeadsMap.get(deptCode);
				
			}else{
				deptHead="114402";
			}
			
			}
			wfcontext.setVariable("deptHead",deptHead);
			log.warn("deptHead:"+deptHead);
			return deptHead;
			}catch(GeneralException e) {
    	 log.warn("General Exception::"+e.getMessage());
     }catch(NullPointerException e1) {
    	 log.warn("NullPointer Exception::"+e1.getMessage()); 
     }
  
  ]]></Source>
  </Script>
  </Arg>
   <Arg name="deptHeadDisplayName">
  <Script>
  <Source><![CDATA[
  		import sailpoint.object.Identity;
  		import sailpoint.object.Custom;
  		import java.util.Map;
  		import sailpoint.tools.GeneralException;
  		
  		try{
  		String deptHead="";
		Identity ident = context.getObject(Identity.class, requestee);
        Custom customObj = context.getObjectByName(Custom.class,"COB-Custom-DeptHead-Mapping");
        Map deptHeadsMap=customObj.get("Dept-DeptHeadNames");
		if (ident != null && customObj != null) {
			String deptCode = (String) ident.getAttribute("departmentCode");
			if (deptCode != null && deptHeadsMap.containsKey(deptCode)) {
				deptHead=deptHeadsMap.get(deptCode);
				
			}
			
			}
		    wfcontext.setVariable("deptHeadDisplayName",deptHead);
			return deptHead;
			}catch(GeneralException e) {
    	 log.warn("General Exception::"+e.getMessage());
     }catch(NullPointerException e1) {
    	 log.warn("NullPointer Exception::"+e1.getMessage()); 
     }
  ]]></Source>
  </Script>
  </Arg>
  <Arg name="requesterEmail">
  <Script>
  <Source>
  import sailpoint.object.Identity;
  import sailpoint.tools.GeneralException;
  
  try{
  Identity ident = context.getObject(Identity.class, requestee);
  wfcontext.setVariable("requesterEmail",ident.getEmail());
  return ident.getEmail();
  }catch(NullPointerException e){
         	log.warn("NullPointer Exception: "+e.getMessage());
        }catch(GeneralException e1) {
       		log.warn("General Exception: "+e1.getMessage());
       		}
              
  </Source>
  </Script>
  </Arg>
  <Transition to="Select Access Application"/>
  </Step>
  <Step name="Select Access Application">
    <Approval name="AccessRequest-SelectionApplication-Approval" owner="ref:launcher" return="appName" send="requestee,launcher">
      <Form name="AccessRequest-SelectionApplication-Form">
        <Attributes>
          <Map>
            <entry key="pageTitle" value="Select Application"/>
          </Map>
        </Attributes>
        <Button action="next" label="Next"/>
        <Button action="cancel" label="Cancel Request"/>
        <Section label="" name="userInstructions" type="text">
          <Field name="Directions" value="Select the application you would like to request access for from the drop-down below."/>
        </Section>
        <Section columns="1" label="">
          <Field displayName="Application" displayType="combobox" name="appName" required="true" type="String">
            <AllowedValuesDefinition>
              <Script>
                <Source><![CDATA[
  
      import sailpoint.object.Custom;
      import java.util.List;
      import sailpoint.tools.Util;
      import sailpoint.tools.GeneralException;
      import sailpoint.object.Identity;
      
     try{       
     
     boolean cantRequestFN =false;
	 Identity launcherObj = context.getObjectByName(Identity.class, launcher);
	 Identity fnLiasionWkgrp = context.getObjectByName(Identity.class, "COB-Workgroup-BAIS-FN-Liasion");
	 if(null != launcherObj && null != fnLiasionWkgrp) {
	 if(!launcherObj.isInWorkGroup(fnLiasionWkgrp)) {
		 cantRequestFN =true;
	 	}
	 }
	 Custom custom = context.getObjectByName(Custom.class, "COB-Custom-RequestAccess-Applications");
	   List appList = (List) custom.get("Applications");
	  //Only display "BAIS FN" if the launcher is a member of "COB-Workgroup-BAIS-FN-Liasion"
	   if(appList != null){
		   if(cantRequestFN) {
	    		 appList.remove("Dev_PeopleSoftFinancials");
	    	 }
			return appList;
			
		}else{
			return null;
		}
       }catch(NullPointerException e){
         	log.warn("NullPointer Exception: "+e.getMessage());
        }catch(GeneralException e1) {
       		log.warn("General Exception: "+e1.getMessage());
       		}
              ]]></Source>
              </Script>
            </AllowedValuesDefinition>
          </Field>
        </Section>
      </Form>
    </Approval>
    <Transition to="Account Request Form" when="approved"/>
    <Transition to="Select Beneficiary" when="!approved"/>
  </Step>
  <Step name="Account Request Form" posX="267">
    <Approval name="Account Request Form Approval" owner="ref:launcher" return="identityModel" send="launcher,identityModel,hasFinAcct,requestee">
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
      <Arg name="workItemForm" value="COB-Form-PSFIN-RequestAccess"/>
    </Approval>
    <Transition to="Account Request Confirmation Form" when="approved"/>
    <Transition to="Select Access Application" when="!approved"/>
  </Step>
  <Step name="Account Request Confirmation Form" posX="378" posY="28">
    <Approval name="Account Request Confirmation Form Approval" owner="ref:launcher" return="identityModel" send="launcher,identityModel,hasFinAcct,requestee">
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
      <Arg name="workItemForm" value="COB-Form-PSFIN-RequestAccess-Confirmation"/>
    </Approval>
    <Transition to="Account Request Form" when="!approved"/>
    <Transition to="Check Training Pre-req" when="approved"/>
  </Step>
  <Step name="Check Training Pre-req" resultVariable="hasCompletedPreReq">
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name=""/>
    <Script>
      <Source><![CDATA[
   //TODO: Logic goes here
   boolean isComplete =false;
   
   return isComplete;
   ]]></Source>
    </Script>
    <Transition to="Pre Requisite Not Completed"/>
    <Transition to="Build Provisioning Plan" when="hasCompletedPreReq"/>
  </Step>
  <Step name="Pre Requisite Not Completed">
    <Approval name="Pre-req-Not-Completed-Approval" owner="ref:launcher" send="">
      <Form name="Pre-req-Not-Completed-Form">
        <Attributes>
          <Map>
            <entry key="pageTitle" value="Attention!"/>
          </Map>
        </Attributes>
        <Button action="next" label="Go to Homepage"/>
        <Section type="datatable">
          <Field name="Message" required="true">
            <Script>
              <Source><![CDATA[
              
              String str = "<font size='2' color='#ff0000'>";
		 	  str = str+"The beneficiary will need to complete all the training pre-requisites in MyLearning Plan. The beneficiary should receive an email from the MyLearningPlan team about the trainings. Please click on 'Go to Homepage'.";
			  str = str + "</font>";	
			  return str;
              
              ]]></Source>
            </Script>
          </Field>
        </Section>
      </Form>
    </Approval>
    <Transition to="Send Training Required Notice Email" when="approved"/>
  </Step>
  <Step name="Send Training Required Notice Email">
  	<Arg name="toEmailAdd" value="pankaj@likemindsconsulting.com"/>
  	<Arg name="identityModel" value="ref:identityModel"/>
    <Arg name="requesterEmail" value="ref:requesterEmail"/>
    <Script>
      <Source><![CDATA[
	
	
	import sailpoint.object.EmailOptions;
	import sailpoint.object.EmailTemplate;
	import sailpoint.tools.GeneralException;
	
	
	//Send email notification to both the MLP team and the requester
	//To the MLP team 
	try{
	String templateName="COB-EmailTemplate-PSFIN-AccessRequest-MLP";
	EmailTemplate template=context.getObjectByName(EmailTemplate.class,templateName);
	EmailOptions emailOptions = new EmailOptions();
	emailOptions.setVariable("requester",identityModel.get("UserDescription"));
	emailOptions.setVariable("email",identityModel.get("PrimaryEmailAddress"));
	emailOptions.setVariable("employeeId",identityModel.get("UserID"));
	emailOptions.setVariable("roleNames",identityModel.get("roleNames"));
	emailOptions.setTo(toEmailAdd);
	//emailOptions.setCc(mlpEmail);
	emailOptions.setSendImmediate(true);
	emailOptions.setNoRetry(true);
	log.warn("MLP Email Done");
	//To the requester
	String templateName2="COB-EmailTemplate-PSFIN-AccessRequest-Requester";
	EmailTemplate template2=context.getObjectByName(EmailTemplate.class,templateName2);
	EmailOptions emailOptions2 = new EmailOptions();
	emailOptions2.setVariable("requester",identityModel.get("UserDescription"));
	emailOptions2.setVariable("email",identityModel.get("PrimaryEmailAddress"));
	emailOptions2.setVariable("employeeId",identityModel.get("UserID"));
	emailOptions2.setVariable("roleNames",identityModel.get("roleNames"));
	emailOptions2.setTo(toEmailAdd);
	//emailOptions2.setCc(requesterEmail);
	emailOptions2.setSendImmediate(true);
	emailOptions2.setNoRetry(true);
	log.warn("Requester Email Done");
	
	context.sendEmailNotification(template,emailOptions);
	context.sendEmailNotification(template2,emailOptions2);
	log.warn("Email Sent");
	 }catch(NullPointerException e) {
    	 log.warn("Error message is: "+e.getMessage());
     }catch(GeneralException e1) {
       		log.warn("General Exception: "+e1.getMessage());
       		}
	
	]]></Source>
    </Script>
  <Transition to="Build Provisioning Plan" when="script: return wfcontext.getRootWorkflowCase().getMessages()==null;"/>
  </Step>
  
  <Step name="Build Provisioning Plan" resultVariable="plan" wait="1">
    <Arg name="plan" value="ref:plan"/>
    <Arg name="identityModel" value="ref:identityModel"/>
    <Arg name="requestee" value="ref:requestee"/>
    <Arg name="hasFinAcct" value="ref:hasFinAcct"/>
    <Script>
      <Source><![CDATA[
import sailpoint.tools.GeneralException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import sailpoint.object.*;
import sailpoint.api.*;
import sailpoint.api.SailPointContext;
import sailpoint.object.Identity;
import sailpoint.object.ManagedAttribute;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.workflow.WorkflowContext;

		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");

try{
        log.warn("requestee::"+requestee);
        Identity ident = context.getObjectById(Identity.class,requestee); 
        log.warn("ident::"+ident);
        String deptCode = ident.getStringAttribute("departmentCode");
        Custom custObj = context.getObjectByName(Custom.class,"COB-Custom-Department-Mapping");
        Map deptMap =custObj.get("Id-Name-Mapping");
        String deptName="";
        if(deptMap.containsKey(deptCode)) {
        	deptName =(String) deptMap.get(deptCode);
        	
        	
        }else{
        
        	deptName ="N/A";
        }
        identityModel.put("deptName", deptName);
        boolean isTreasuryApproval =true;
        wfcontext.setVariable("isTreasuryApproval",isTreasuryApproval);
        String defaultPwd=getPasswordFor_S_Account();
        identityModel.put("defaultPwd", defaultPwd);
        
        //Get 'EmailAddresses' List
        List emailList = new ArrayList();
		Map emailMap = new HashMap();
		emailMap.put("EmailAddress", identityModel.get("PrimaryEmailAddress"));
		emailList.add(emailMap);
		String appName="Dev_PeopleSoftFinancials";
		ProvisioningPlan.AccountRequest psFinAcctReq= new ProvisioningPlan.AccountRequest();
        if(hasFinAcct){
        //Build Update account request
        String psFinNative = getNativeIdentity(identityName,appName);
        psFinAcctReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
        psFinAcctReq.setApplication(appName);
        psFinAcctReq.setNativeIdentity(psFinNative);
        psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("roleNames",identityModel.get("roleNames")));
        }else{
        //Build create account request
       
        psFinAcctReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Create);
        psFinAcctReq.setApplication(appName);
        psFinAcctReq.setNativeIdentity(identityName);
        psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("EmailUser",identityModel.get("EmailUser")));
	    psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("UserID",identityModel.get("UserID")));
	    psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("EmailAddresses",emailList));
	    psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("WorkListUser",identityModel.get("workListUser")));
       	psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("UserDescription",identityModel.get("UserDescription")));
       	psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("password",context.encrypt(defaultPwd)));
       	psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("PasswordExpired", "false"));
       	psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("SymbolicID","PSFNDV2"));
       	psFinAcctReq.add(new ProvisioningPlan.AttributeRequest("roleNames",identityModel.get("roleNames")));
       	}
		ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(ident);
		plan.add(psFinAcctReq);
		log.warn("plan:;"+plan.toXml());
		return plan;
	 }catch(NullPointerException e){
         	log.warn("NullPointer Exception: "+e.getMessage());
        }catch(GeneralException e1) {
       		log.warn("General Exception: "+e1.getMessage());
       		}
	]]></Source>
    </Script>
    <Transition to="ProvisioningProject" when="script: return wfcontext.getRootWorkflowCase().getMessages()==null;"/>
  </Step>
  <Step action="compileProvisioningProject" icon="Default" name="ProvisioningProject" posX="762" resultVariable="project">
    <Arg name="project" value="ref:project"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="identityName" value="ref:requestee"/>
    <Transition to="BuildApprovalSet" when="script: return wfcontext.getRootWorkflowCase().getMessages()==null;"/>
    <Transition to="end"/>
  </Step>
  <Step action="call:buildApprovalSet" name="BuildApprovalSet" posX="877" resultVariable="approvalSet">
    <Arg name="plan" value="ref:plan"/>
    <Return name="approvalSet" to="approvalSet"/>
    <Transition to="CreateIdentityRequest" when="script: return wfcontext.getRootWorkflowCase().getMessages()==null;"/>
    <Transition to="end"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="CreateIdentityRequest" posX="1005" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="source">
      <Script>
        <Source><![CDATA[
             return workflow.getName();
          ]]></Source>
      </Script>
    </Arg>
    <Arg name="priority" value="ref:priority"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="flow" value="LCM"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Dept Head Approval" when="script: return wfcontext.getRootWorkflowCase().getMessages()==null;"/>
    <Transition to="end"/>
  </Step>
  <Step name="Dept Head Approval">
    <Approval mode="serial" name="DeptHead-Approval" owner="ref:deptHead" return="requestRejected,identityModel" send="identityName,identityModel">
      <AfterScript>
        <Source><![CDATA[
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.*;
          import sailpoint.object.EmailOptions;
	      import sailpoint.object.EmailTemplate;
	      import sailpoint.tools.GeneralException;
	      
	      try{
   		  String approvalStatus = null;     
   		  ApprovalSet set = approvalSet;
   		  List items = approvalSet.getItems();
		  String firstName=identityModel.get("firstName");
		  String lastName=identityModel.get("lastName");
		  List comments = new ArrayList();
		  
		  log.warn("Approver Comments :"+ identityModel.get("deptHeadComments"));
		  
		  
		  if(identityModel.get("deptHeadComments")!=null){
		  	Comment cmt = new Comment(identityModel.get("deptHeadComments").toString(), deptHeadDisplayName);
		  	comments.add(cmt);
		  }
		  if(approval.getCompletionState().toString().equals("Finished")){
        		if(requestRejected != null && requestRejected.equals("true")){
            		approvalStatus = "REJECTED";
					for(ApprovalItem item : items){
						item.setComments(comments);
						item.reject();
						log.warn("item.toXml():"+item.toXml());
					}
            	}else{
            		approvalStatus = "APPROVED";
					for(ApprovalItem item : items){
						item.setComments(comments);
						item.approve();
					}
        		}
        	}	
        	
            IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);
            auditDecisions(item);
            
            //Send approval status email notifications 
           
	
	
	//Send email notification to the requester
	//Confirmation Email
	String templateName="COB-EmailTemplate-PSFIN-AccessRequest-Approval-Status";
	EmailTemplate template=context.getObjectByName(EmailTemplate.class,templateName);
	EmailOptions emailOptions = new EmailOptions();
	emailOptions.setVariable("requesterDisplayName",identityModel.get("UserDescription"));
	emailOptions.setVariable("roleNames",identityModel.get("roleNames"));
	if(approvalStatus.equalsIgnoreCase("APPROVED")){
		emailOptions.setVariable("approved","true");
		}else{
			
		emailOptions.setVariable("rejected","true");
			}
	emailOptions.setVariable("dept","Department Head");
	emailOptions.setTo("pankaj@likemindsconsulting.com");
	//emailOptions.setTo(requesterEmail);
	emailOptions.setSendImmediate(true);
	emailOptions.setNoRetry(true);

	context.sendEmailNotification(template,emailOptions);
	log.warn("Dept Head Approval Status Email Sent");
	}catch(GeneralException e) {
    	 log.warn("General Exception::"+e.getMessage());
     }catch(NullPointerException e1) {
    	 log.warn("NullPointer Exception::"+e1.getMessage()); 
     }
        ]]></Source>
      </AfterScript>
      <Arg name="workItemType" value="Approval"/>
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId"/>
      <Arg name="workItemElectronicSignature" value="ref:managerElectronicSignature"/>
      <Arg name="workItemRequester" value="$(launcher)"/>
      <Arg name="workItemDescription">
        <Script>
          <Source><![CDATA[
        	String value="Manager Approval - New PeopleSoft Financials Account/Access Request :";
        	value= value + identityModel.get("UserDescription");
            return value;
          ]]></Source>
        </Script>
      </Arg>
      <Arg name="workItemNotificationTemplate" value="COB-EmailTemplate-PSFIN-AccessRequest-DeptHead-Approval"/>
      <Arg name="workItemTargetClass" value="sailpoint.object.Identity"/>
      <Arg name="workItemTargetName" value="ref:identityName"/>
      <Arg name="workItemPriority" value="ref:priority"/>
      <Arg name="workItemForm" value="COB-PSFIN-AccessRequest-DeptHead-Approval"/>
      <Arg name="requesterEmail" value="ref:requesterEmail"/>
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
      <Arg name="deptHeadDisplayName" value="ref:deptHeadDisplayName"/>
      <Arg name="deptHead" value="ref:deptHead"/>
    </Approval>
    <Transition to="end" when="script: return requestRejected"/>
    <Transition to="Auditing Approval"/>
  </Step>
  <Step name="Auditing Approval">
    <Approval mode="serial" name="Auditing-Approval" owner="ref:auditingWkgrp" return="requestRejected,identityModel" send="identityName,identityModel">
      <AfterScript>
        <Source><![CDATA[
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.*;
          import sailpoint.tools.GeneralException;
          
          try{
   		  String approvalStatus = null;     
   		  ApprovalSet set = approvalSet;
   		  List items = approvalSet.getItems();
		  String firstName=identityModel.get("firstName");
		  String lastName=identityModel.get("lastName");
		  List comments = new ArrayList();
		  
		  log.debug("Approver Comments :"+ requestRejected);
		  
		  if(identityModel.get("auditingComments")!=null){
		  	Comment cmt = new Comment(identityModel.get("auditingComments").toString(),auditingWkgrp);
		  	comments.add(cmt);
		  }
		  if(approval.getCompletionState().toString().equals("Finished")){
        		if(requestRejected != null && requestRejected.equals("true")){
            		approvalStatus = "REJECTED";
					for(ApprovalItem item : items){
						item.setComments(comments);
						item.reject();
					}
            	}else{
            		approvalStatus = "APPROVED";
					for(ApprovalItem item : items){
						item.setComments(comments);
						item.approve();
					}
        		}
        	}	
        	
            IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);
            auditDecisions(item);
            
            //Send email notification to the requester
			//Confirmation Email
			String templateName="COB-EmailTemplate-PSFIN-AccessRequest-Approval-Status";
			EmailTemplate template=context.getObjectByName(EmailTemplate.class,templateName);
			EmailOptions emailOptions = new EmailOptions();
			emailOptions.setVariable("requesterDisplayName",identityModel.get("UserDescription"));
			emailOptions.setVariable("roleNames",identityModel.get("roleNames"));
			if(approvalStatus.equalsIgnoreCase("APPROVED")){
				emailOptions.setVariable("approved","true");
			}else{
			
				emailOptions.setVariable("rejected","true");
			}
			emailOptions.setVariable("dept","Auditing");
			emailOptions.setTo("pankaj@likemindsconsulting.com");
			//emailOptions.setTo(requesterEmail);
			emailOptions.setSendImmediate(true);
			emailOptions.setNoRetry(true);

			context.sendEmailNotification(template,emailOptions);
			log.warn("Auditing Approval Status Email Sent");
			}catch(GeneralException e) {
    	 log.warn("General Exception::"+e.getMessage());
     }catch(NullPointerException e1) {
    	 log.warn("NullPointer Exception::"+e1.getMessage()); 
     }
        ]]></Source>
      </AfterScript>
      <Arg name="workItemType" value="Approval"/>
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId"/>
      <Arg name="workItemElectronicSignature" value="ref:managerElectronicSignature"/>
      <Arg name="workItemRequester" value="$(launcher)"/>
      <Arg name="workItemDescription">
        <Script>
          <Source><![CDATA[
        	String value="Auditing Approval - New PeopleSoft Financials Account/Access Request :";
        	value= value + identityModel.get("UserDescription");
            return value;
          ]]></Source>
        </Script>
      </Arg>
      <Arg name="workItemNotificationTemplate" value="COB-EmailTemplate-PSFIN-AccessRequest-Auditing-Approval"/>
      <Arg name="workItemTargetClass" value="sailpoint.object.Identity"/>
      <Arg name="workItemTargetName" value="ref:identityName"/>
      <Arg name="workItemPriority" value="ref:priority"/>
      <Arg name="workItemForm" value="COB-PSFIN-AccessRequest-Auditing-Approval"/>
      <Arg name="requesterEmail" value="ref:requesterEmail"/>
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
      <Arg name="auditingWkgrp" value="ref:auditingWkgrp"/>
    </Approval>
    <Transition to="end" when="script: return requestRejected"/>
    <Transition to="Treasury Approval" when="isTreasuryApproval"/>
  </Step>
  <Step name="Treasury Approval">
    <Approval mode="serial" name="Auditing-Approval" owner="ref:treasuryWkgrp" return="requestRejected,identityModel" send="identityName,identityModel">
      <AfterScript>
        <Source><![CDATA[
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.*;
          import sailpoint.tools.GeneralException;
          
          try{
   		  String approvalStatus = null;     
   		  ApprovalSet set = approvalSet;
   		  List items = approvalSet.getItems();
		  String firstName=identityModel.get("firstName");
		  String lastName=identityModel.get("lastName");
		  List comments = new ArrayList();
		  
		  log.debug("Approver Comments :"+ requestRejected);
		  
		  if(identityModel.get("treasuryComments")!=null){
		  	Comment cmt = new Comment(identityModel.get("treasuryComments").toString(),treasuryWkgrp);
		  	comments.add(cmt);
		  }
		  if(approval.getCompletionState().toString().equals("Finished")){
        		if(requestRejected != null && requestRejected.equals("true")){
            		approvalStatus = "REJECTED";
					for(ApprovalItem item : items){
						item.setComments(comments);
						item.reject();
						
					}
            	}else{
            		approvalStatus = "APPROVED";
					for(ApprovalItem item : items){
						item.setComments(comments);
						item.approve();
					}
        		}
        	}	
        	
            IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);
            auditDecisions(item);
            
             //Send email notification to the requester
			//Confirmation Email
			String templateName="COB-EmailTemplate-PSFIN-AccessRequest-Approval-Status";
			EmailTemplate template=context.getObjectByName(EmailTemplate.class,templateName);
			EmailOptions emailOptions = new EmailOptions();
			emailOptions.setVariable("requesterDisplayName",identityModel.get("UserDescription"));
			emailOptions.setVariable("roleNames",identityModel.get("roleNames"));
			if(approvalStatus.equalsIgnoreCase("APPROVED")){
				emailOptions.setVariable("approved","true");
			}else{
			
				emailOptions.setVariable("rejected","true");
			}
			emailOptions.setVariable("dept","Treasury");
			emailOptions.setTo("pankaj@likemindsconsulting.com");
			//emailOptions.setTo(requesterEmail);
			emailOptions.setSendImmediate(true);
			emailOptions.setNoRetry(true);

			context.sendEmailNotification(template,emailOptions);
			log.warn("Treasury Approval Status Email Sent");
			}catch(GeneralException e) {
    	 log.warn("General Exception::"+e.getMessage());
     }catch(NullPointerException e1) {
    	 log.warn("NullPointer Exception::"+e1.getMessage()); 
     }
        ]]></Source>
      </AfterScript>
      <Arg name="workItemType" value="Approval"/>
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId"/>
      <Arg name="workItemElectronicSignature" value="ref:managerElectronicSignature"/>
      <Arg name="workItemRequester" value="$(launcher)"/>
      <Arg name="workItemDescription">
        <Script>
          <Source><![CDATA[
        	String value="Treasury Approval - New PeopleSoft Financials Account/Access Request :";
        	value= value + identityModel.get("UserDescription");
            return value;
          ]]></Source>
        </Script>
      </Arg>
      <Arg name="workItemNotificationTemplate" value="COB-EmailTemplate-PSFIN-AccessRequest-Treasury-Approval"/>
      <Arg name="workItemTargetClass" value="sailpoint.object.Identity"/>
      <Arg name="workItemTargetName" value="ref:identityName"/>
      <Arg name="workItemPriority" value="ref:priority"/>
      <Arg name="workItemForm" value="COB-PSFIN-AccessRequest-Treasury-Approval"/>
      <Arg name="requesterEmail" value="ref:requesterEmail"/>
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
      <Arg name="treasuryWkgrp" value="ref:treasuryWkgrp"/>
    </Approval>
    <Transition to="end" when="script: return requestRejected"/>
    <Transition to="Provision_Project"/>
    </Step>
    <Step action="compileProvisioningProject" icon="Default" name="Provision_Project" posX="267" posY="104" resultVariable="project">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="noApplicationTemplates" value="true"/>
    <Arg name="requireCreateTemplates" value="false"/>
    <Arg name="optimisticProvisioning" value="false"/>
    <Arg name="source" value="UI"/>
    <Arg name="requester" value="spadmin"/>
    <Arg name="noLocking" value="true"/>
    <Transition to="Provision" when="approved"/>
  </Step>
  <Step name="Provision">
    <Arg name="project" value="ref:project"/>
    <Arg name="maxRetries"/>
    <Arg name="provisioningRetryThreshold"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="retryProject"/>
    <Arg name="retries"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Description>Call a sub process to provision</Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Provision with retries"/>
    </WorkflowRef>
    <Transition to="AuditProvision"/>
  </Step>
  <Step icon="Audit" name="AuditProvision" posX="425" posY="104">
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="COB-Workflow-Application-AccessRequest"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");

		Identity idn = context.getObject(Identity.class, identityName);
		cobProvisioningAuditLog(logPrefix, source, launcher, project, idn);

		cobLog(logPrefix, "Exit Step");
		]]></Source>
    </Script>
    <Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity" posX="1381" posY="102">
    <Arg name="refreshLinks" value="true"/>
    <Arg name="forceLinkAttributePromotion" value="true"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="promoteAttributes" value="true"/>
    <Arg name="processTriggers" value="false"/>
    <Description>
			Add arguments as necessary to enable refresh features. Typically you
			only want this to correlate roles. Don't ask for provisioning since
			that
			can result in provisioning policies that need to be presented and it's
			too late for that. This is only to get role detection and exception
			entitlements in the cube.
		</Description>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="994" posY="107" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="autoVerify" value="true"/>
    <Transition to="Send Update Account Notification" when="hasFinAcct"/>
    <Transition to="Send New Account Notifications"/>
  </Step>
  <Step name="Send Notifications" posX="1130" posY="107">
    <Arg name="toEmailAdd" value="pankaj@likemindsconsulting.com"/>
  	<Arg name="identityModel" value="ref:identityModel"/>
    <Arg name="identity" value="ref:identity"/>
    <Arg name="requesterEmail" value="ref:requesterEmail"/>
    <Script>
      <Source><![CDATA[
	
	import sailpoint.tools.GeneralException;
	import sailpoint.object.EmailOptions;
	import sailpoint.object.EmailTemplate;
	
	
	//Send email notification to the requester
	//Confirmation Email
	try{
	String templateName="COB-EmailTemplate-PSFIN-AccessRequest-Confirmation";
	EmailTemplate template=context.getObjectByName(EmailTemplate.class,templateName);
	EmailOptions emailOptions = new EmailOptions();
	emailOptions.setVariable("requesterDisplayName",identityModel.get("UserDescription"));
	emailOptions.setVariable("email",identityModel.get("PrimaryEmailAddress"));
	emailOptions.setVariable("userId",identityModel.get("UserID"));
	emailOptions.setVariable("roleNames",identityModel.get("roleNames"));
	emailOptions.setTo(toEmailAdd);
	//emailOptions.setTo(requesterEmail);
	emailOptions.setSendImmediate(true);
	emailOptions.setNoRetry(true);
	
	//Password email
	String templateName2="COB-EmailTemplate-PSFIN-AccessRequest-Password";
	EmailTemplate template2=context.getObjectByName(EmailTemplate.class,templateName2);
	EmailOptions emailOptions2 = new EmailOptions();
	emailOptions2.setVariable("requesterDisplayName",identityModel.get("UserDescription"));
	emailOptions2.setVariable("defaultPwd",identityModel.get("defaultPwd"));
	emailOptions2.setTo(toEmailAdd);
	//emailOptions2.setTo(requesterEmail);
	
	context.sendEmailNotification(template2,emailOptions2);
	context.sendEmailNotification(template,emailOptions);
	log.warn("Final Emails Sent");
	}catch(GeneralException e) {
    	 log.warn("General Exception::"+e.getMessage());
     }catch(NullPointerException e1) {
    	 log.warn("NullPointer Exception::"+e1.getMessage()); 
     }
	
	]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
   <Step name="Send Update Account Notification" posX="1130" posY="107">
    <Arg name="toEmailAdd" value="pankaj@likemindsconsulting.com"/>
  	<Arg name="identityModel" value="ref:identityModel"/>
    <Arg name="identity" value="ref:identity"/>
    <Arg name="requesterEmail" value="ref:requesterEmail"/>
    <Script>
      <Source><![CDATA[
	
	
	import sailpoint.object.EmailOptions;
	import sailpoint.object.EmailTemplate;
	import sailpoint.tools.GeneralException;
	
	//Send email notification to the requester
	//Confirmation Email
	try{
	String templateName="COB-EmailTemplate-PSFIN-AccessRequest-Update-Confirmation";
	EmailTemplate template=context.getObjectByName(EmailTemplate.class,templateName);
	EmailOptions emailOptions = new EmailOptions();
	emailOptions.setVariable("requesterDisplayName",identityModel.get("UserDescription"));
	emailOptions.setVariable("roleNames",identityModel.get("roleNames"));
	emailOptions.setTo(toEmailAdd);
	//emailOptions.setTo(requesterEmail);
	emailOptions.setSendImmediate(true);
	emailOptions.setNoRetry(true);

	context.sendEmailNotification(template,emailOptions);
	log.warn("Final Emails Sent");
	}catch(GeneralException e) {
    	 log.warn("General Exception::"+e.getMessage());
     }catch(NullPointerException e1) {
    	 log.warn("NullPointer Exception::"+e1.getMessage()); 
     }
     
	
	]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step name="end"/>
  <Step catches="complete" icon="Catches" name="HandleException" posX="37" posY="690">
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		try {
	            cobLog(logPrefix, "EnterStep");
				if(!wfcontext.getWorkflowCase().getErrors().isEmpty()){
				sendErrorEmailFromWorkflow(wfcontext);
				}
				cobLog(logPrefix, "ExitStep");
			}
		 catch (Throwable e) {
			cobLog(logPrefix, "Exception:");
			e.printStackTrace();
		}
	  ]]></Source>
    </Script>
  </Step>
</Workflow>
