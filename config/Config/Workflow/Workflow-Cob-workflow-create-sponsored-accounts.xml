<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,LCM,IdentityRequest" name="COB-Workflow-Create-Sponsored-Accounts">
  <Variable initializer="true" name="transient">
    <Description>Set to false to cause workflow-related objects, such as approval
        work items, to be saved in the database even if they are only
        viewed by the person registering.</Description>
  </Variable>
  <Variable initializer="identityModel" name="basePath">
    <Description>The formpath to the link we are interested in editing.</Description>
  </Variable>
  <Variable name="launcher"/>
  <Variable name="identityModel"/>
  <Variable initializer="ref:launcher" name="identityName"/>
  <Variable name="identityRequestId"/>
  <Variable name="identityRequest"/>
  <Variable initializer="string:true" name="trace"/>
  <Variable name="approvalSet" output="true">
    <Description>This attribute is set during the "BuildApprovalSet" step,
       which builds this list by going through the ProvisioningPlan
       to build the line items that need to be approved.

       This variable includes all ApprovalItems that are part of
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions
       and comments from the Approvals copy of the ApprovalItem.</Description>
  </Variable>
  <Variable name="launcherManager">
    <Script>
      <Source><![CDATA[
      import sailpoint.object.Identity;

		
		Identity ident = context.getObject(Identity.class, launcher);
      
 
		if (ident != null) {
			Identity manager =ident.getManager();
      if(manager != null){
      return manager.getName();
      
			}
			
			}
      ]]></Source>
    </Script>
  </Variable>
  <Variable name="launcherManagerDisplayName">
    <Script>
      <Source><![CDATA[
      import sailpoint.object.Identity;

		
		Identity ident = context.getObject(Identity.class, launcher);
      
 
		if (ident != null) {
			Identity manager =ident.getManager();
      if(manager != null){
      log.warn("manager name::"+manager.getDisplayName());
      return manager.getDisplayName();
      
			}
			
			}
      ]]></Source>
    </Script>
  </Variable>
  <Variable name="requesterEmail">
    <Script>
      <Source><![CDATA[
      import sailpoint.object.Identity;

		String launcher =context.getUserName();
		Identity ident = context.getObject(Identity.class, launcher);
 
		if (ident != null) {
			String email = (String) ident.getAttribute("email");
			if (email != null) {
				return email;
			}
			
			}
      ]]></Source>
    </Script>
  </Variable>
  <Variable name="requestRejected"/>
  <Variable editable="true" name="defaultSecurityMessage"/>
  <Variable initializer=",ou=Room 708,ou=DoIT,ou=CoB,dc=IAM-AD-Dev,dc=cob" name="baseDN"/>
  <Variable name="bpsBaseDN"/>
  <Variable initializer=",cn=Internal Users,dc=boston1,dc=cob" name="hdapBaseDN"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-AuditRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-SpAcctProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="12" resultVariable="workflowLogPrefix">
    <Script>
      <Source><![CDATA[
            import sailpoint.object.Application;
            import sailpoint.tools.Util;

      	String workflowLogPrefix = workflow.getName() + "::requestedBy::" + launcher + "::"; 
		System.out.println("workflowLogPrefix::"+ workflowLogPrefix);
		return workflowLogPrefix;
	]]></Source>
    </Script>
    <Transition to="Build Identity Model"/>
  </Step>
  <Step action="call:getIdentityModel" icon="Task" name="Build Identity Model" posX="146" resultVariable="identityModel">
    <Arg name="identityId">
      <Script>
        <Source><![CDATA[
				return null;
		  ]]></Source>
      </Script>
    </Arg>
    <Arg name="identityName"/>
    <Description>
         For now, build a map of the data. Eventually this will use the Identity
         transformer to build a Map based on an existing identityName, or 
         Identity object.
      </Description>
    <Transition to="Select Account Type"/>
  </Step>
  <Step name="Select Account Type">
    <Approval name="COB-Select Account Type Approval" owner="ref:launcher" return="identityModel" send="launcher,launcherManager">
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
      <Arg name="workItemForm" value="COB-Form-SponseredAccountCreation-MainForm"/>
    </Approval>
    <Transition to="Create Contractor Form"/>
  </Step>
  <Step name="Create Contractor Form" posX="267">
    <Approval name="COB - Create Contractor Form Approval" owner="ref:launcher" return="identityModel" send="launcher,launcherManagerDisplayName,identityModel">
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
      <Arg name="workItemForm" value="COB-Form-Create-Contractor"/>
    </Approval>
    <Transition to="Contractor Confirmation Form" when="approved"/>
    <Transition to="Select Account Type" when="!approved"/>
  </Step>
  <Step name="Contractor Confirmation Form" posX="378" posY="28">
    <Approval name="COB - Create Contractor Confirmation Form" owner="ref:launcher" return="identityModel" send="identityModel">
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
      <Arg name="workItemForm" value="COB-Form-CreateContractor-Confirmation"/>
    </Approval>
    <Transition to="Create Contractor Form" when="!approved"/>
    <Transition to="CheckIfIdentityExists" when="approved"/>
  </Step>
  <Step name="CheckIfIdentityExists" resultVariable="isIdentityNew">
    <Script>
      <Source><![CDATA[
      import sailpoint.object.*;
      import java.util.*;
      
    /**Add logic to check identity based on the date of birth**/
    boolean isIdentityNew=true; 
     String firstName=identityModel.get("firstName").trim();
     String departmentCode=identityModel.get("departmentId");
    //get date of birth
   Date birthDate =identityModel.get("cobDob");
   java.text.DateFormat dateFormat= new java.text.SimpleDateFormat("MM/dd/yyyy");
   String cobDob= dateFormat.format(birthDate);
   wfcontext.setVariable("cobDob", cobDob);
   QueryOptions qo = new QueryOptions();
   qo.add(Filter.eq("cobDob",cobDob));
   qo.add(Filter.eq("firstname",firstName));
   qo.add(Filter.eq("departmentCode",departmentCode));
   Iterator identIterator = context.search(Identity.class,qo);
   if(identIterator.hasNext()){
        isIdentityNew=false;
        wfcontext.setVariable("exisIdentName", identIterator.next().getDisplayName());
        }
        return isIdentityNew;
      ]]></Source>
    </Script>
    <Transition to="CreateIdentity" when="isIdentityNew"/>
    <Transition to="ShowIdentityExistsForm"/>
  </Step>
  <Step name="ShowIdentityExistsForm">
    <Approval name="COB-SponsoredAcctExists-Form" owner="ref:launcher" send="exisIdentName">
      <Form name="COB-SponsoredAcctExists-Form">
        <Attributes>
          <Map>
            <entry key="pageTitle" value="Attention!"/>
          </Map>
        </Attributes>
        <Button action="cancel" label="Go to Homepage"/>
        <Button action="back" label="Go Back"/>
        <Section type="datatable">
          <Field name="Message" required="true">
            <Script>
              <Source><![CDATA[
              
        String str = "<font size='2' color='#ff0000'>";
			  str = str + "An sponsored account"+" "+exisIdentName+"for this user already exists.";
			  str = str + "</font>";	
			  return str;
              
              ]]></Source>
            </Script>
          </Field>
        </Section>
      </Form>
    </Approval>
    <Transition to="end" when="approved"/>
    <Transition to="Create Contractor Form" when="!approved"/>
  </Step>
  <Step name="CreateIdentity" posX="522" resultVariable="id">
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="launcherManagerDisplayName" value="ref:launcherManagerDisplayName"/>
    <Arg name="launcherManager" value="ref:launcherManager"/>
    <Script>
      <Source><![CDATA[
import java.util.List;
import java.util.Map;
import sailpoint.object.Custom;
import sailpoint.object.Identity;
		/**
		* First, create an Identity cube in IIQ to represent the contractor's identity.
		*
		* We set the name as the sAMAccountName since an HR employeeId is not available.
		*
		*/

		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		/**Get values from the form to create the cube**/
        
		String firstName = (String) identityModel.get("firstName");
		log.warn("firstName:"+firstName);
		String middleInitial = (String) identityModel.get("middleInitial");
		String lastName = (String) identityModel.get("lastName");
        String password=getPasswordFor_S_Account();
        identityModel.put("defaultPassword",password);
        String cobJobLocationCode= identityModel.get("location");
        String dept=identityModel.get("departmentId");
        int index =dept.indexOf('-');
        String deptId=dept.substring(index+1);
        identityModel.put("deptCode",deptId);
        String accountType=(String) identityModel.get("accountType");
        String displayName =firstName+" "+lastName+"("+accountType+")";
        Date date= new Date();
        //get expiration date as a string    
        Date expDate =identityModel.get("contractEndDate");
        java.text.DateFormat dateFormat= new java.text.SimpleDateFormat("MM/dd/YYYY");
        String expDateStr= dateFormat.format(expDate);
        log.warn("expDateStr:"+expDateStr);
        //get start date as a string    
        Date startDate =identityModel.get("cobHireDate");
        String newDate= dateFormat.format(startDate);
        StringBuilder tempSAMAccountName = new StringBuilder();
		    List sAMAccountNames = generateSAMAccountNames(firstName, lastName);
		    if (sAMAccountNames.size() > 0) {
			      tempSAMAccountName.append(sAMAccountNames.iterator().next());
		    }
		   tempSAMAccountName.append("==").append(java.util.UUID.randomUUID());
		   identityModel.put("sAMAccountName",tempSAMAccountName.toString());
        
        
        String mail="";
        String emailRequired= identityModel.get("cobEmailRequired");
        if(emailRequired.equalsIgnoreCase("Yes")){
        mail=generateUniqueEmailAddress(firstName,lastName,context);
        }else{
        mail= (String) identityModel.get("companyEmail");
        }
        System.out.println("email::"+mail);
        identityModel.put("email", mail);
         wfcontext.setVariable("email", mail);
       
        log.warn("mail:"+mail);
		
		identityModel.put("managerDisplayName", launcherManagerDisplayName);
		log.warn("resolveDisplayName(launcher)::"+resolveDisplayName(launcher));
		identityModel.put("requesterDisplayName", resolveDisplayName(launcher));
		Identity newSponAcct = new Identity();
		log.warn("tempSAMAccountName.toString()::"+tempSAMAccountName.toString());
		newSponAcct.setName(tempSAMAccountName.toString());
		newSponAcct.setAttribute("firstname", firstName);
		newSponAcct.setAttribute("lastname", lastName);
		if(middleInitial != null){
			newSponAcct.setAttribute("cobMiddleInitial", middleInitial);
		}
	  	newSponAcct.setAttribute("displayName", displayName);
		newSponAcct.setAttribute("email", mail);
    	newSponAcct.setAttribute("cobHireDate",newDate);
        if(deptId != null){
    		newSponAcct.setAttribute("departmentCode",deptId);
        }
   	 	newSponAcct.setAttribute("cobDob",cobDob);
    	log.warn("cobDob:"+cobDob);
    	newSponAcct.setAttribute("cobTermDate",expDateStr);
    	newSponAcct.setAttribute("cobJobLocationCode",cobJobLocationCode);
    	Identity manager=context.getObjectByName(Identity.class,launcherManager);
		newSponAcct.setManager(manager);
		newSponAcct.setPassword(password);
		log.warn("password set: line 296");
		if(startDate.compareTo(date) > 1){
			newSponAcct.setAttribute("inactive","true");
		}
		context.saveObject(newSponAcct);
		context.commitTransaction();
	
		return newSponAcct;

	]]></Source>
    </Script>
    <Transition to="checkIfBPSUser"/>
  </Step>
  <Step name="checkIfBPSUser" resultVariable="isBPSRequest">
    <Arg name="id" value="ref:id"/>
    <Script>
      <Source><![CDATA[
    isBPSRequest(id);
      ]]></Source>
    </Script>
    <Transition to="AD_Provision_Plan"/>
  </Step>
  <Step icon="Message" name="AD_Provision_Plan" posX="646" resultVariable="plan">
    <Arg name="id" value="ref:id"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="identityModel" value="ref:identityModel"/>
    <Arg name="mail" value="ref:mail"/>
    <Arg name="displayName" value="ref:displayName"/>
    <Arg name="isBPSRequest" value="ref:isBPSRequest"/>
    <Script>
      <Source><![CDATA[
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import sailpoint.object.Identity;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Util;

    String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
	System.out.println("logPrefix::"+logPrefix);
        
    String firstName =id.getFirstname();
	  String middleInitial =id.getStringAttribute("cobMiddleInitial");
	  String lastName =id.getLastname();
    String password=id.getPassword();
    String displayName = firstName+" "+lastName;
    String idName= id.getName();
    String uniqueOU= idName.substring(0,3);
    ProvisioningPlan plan = new ProvisioningPlan();

	// create AD account
    ProvisioningPlan.AccountRequest acctReqAD = new  ProvisioningPlan.AccountRequest();
    String host="";
    String deptCode = identityModel.get("deptCode");
    String adGrpName =getDeptADGroup(deptCode);
    if(isBPSRequest){
     host =getADHost("Dev_BPS_AD", context);
     acctReqAD.setOperation(ProvisioningPlan.AccountRequest.Operation.Create);
	 acctReqAD.setApplication("Dev_BPS_AD");
    //acctReqAD.setNativeIdentity("cn="+id.getName()+uniqueOU+bpsBaseDN);
    //acctReqAD.add(new ProvisioningPlan.AttributeRequest("password",password));
    //acctReqAD.add(new ProvisioningPlan.AttributeRequest("IIQDisabled","false"));
    //acctReqAD.add(new ProvisioningPlan.AttributeRequest("ObjectType","User" ));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("pwdLastSet","false" ));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("givenName",firstName));
	acctReqAD.add(new ProvisioningPlan.AttributeRequest("sn",lastName));
	 //acctReqAD.add(new ProvisioningPlan.AttributeRequest("distinguishedName","cn="+idName+baseDN));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("displayName",displayName));
    /*
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,""));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,""));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,""));
   */
    }else{
    
    
    host = getADHost("Dev_CityHall_AD", context);
    acctReqAD.setOperation(ProvisioningPlan.AccountRequest.Operation.Create);
	acctReqAD.setApplication("Dev_CityHall_AD");
    acctReqAD.setNativeIdentity("cn="+id.getName()+baseDN);
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("password",context.encrypt(identityModel.get("defaultPassword"))));
    //acctReqAD.add(new ProvisioningPlan.AttributeRequest("IIQDisabled","false"));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("ObjectType", "User"));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("pwdLastSet", "false"));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("givenName", firstName));
	acctReqAD.add(new ProvisioningPlan.AttributeRequest("sn",lastName));
	 //acctReqAD.add(new ProvisioningPlan.AttributeRequest("distinguishedName","cn="+idName+baseDN));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("displayName", displayName));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,"All Email Users"));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,adGrpName));
    acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,"All City Hall Mail Users"));
        }
      
    plan.add(acctReqAD);
    plan.setIdentity(id);
    return plan;
		]]></Source>
    </Script>
    <Transition to="ProvisioningProject"/>
  </Step>
  <Step action="compileProvisioningProject" icon="Default" name="ProvisioningProject" posX="762" resultVariable="project">
    <Arg name="project" value="ref:project"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="identityName">
      <Script>
        <Source><![CDATA[
             return id.getName();
          ]]></Source>
      </Script>
    </Arg>
    <Transition to="BuildApprovalSet"/>
  </Step>
  <Step action="call:buildApprovalSet" name="BuildApprovalSet" posX="877" resultVariable="approvalSet">
    <Arg name="plan" value="ref:plan"/>
    <Return name="approvalSet" to="approvalSet"/>
    <Transition to="CreateIdentityRequest"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="CreateIdentityRequest" posX="1005" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="source">
      <Script>
        <Source><![CDATA[
             return workflow.getName();
          ]]></Source>
      </Script>
    </Arg>
    <Arg name="priority" value="ref:priority"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="identityDisplayName">
      <Script>
        <Source><![CDATA[
             return id.getDisplayName();
          ]]></Source>
      </Script>
    </Arg>
    <Arg name="flow" value="LCM"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="get Launcher Details"/>
  </Step>
  <Step name="get Launcher Details" posX="1122">
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="identityModel" value="ref:identityModel"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Script>
      <Source><![CDATA[
	  	import java.util.*;
		import sailpoint.object.EmailTemplate;
		import sailpoint.object.EmailOptions;
		import java.util.Map;
		import java.util.HashMap;
		import java.text.DateFormat;
		import java.text.SimpleDateFormat;		
		import sailpoint.object.*;
		import sailpoint.server.Auditor;
		
		Identity launcherIdn = context.getObject(Identity.class, launcher);

		if (launcherIdn != null) {
			String email = (String) launcherIdn.getAttribute("email");
			if (email != null) {
				wfcontext.setVariable("launcherEmail", email);
			}
			Identity launcherManagerIdn = launcherIdn.getManager();
			if (launcherManagerIdn != null) {
				wfcontext.setVariable("launcherManager", launcherManagerIdn.getName());
				identityModel.put("launcherManager", launcherManagerIdn.getName());
				wfcontext.setVariable("launcherManagerDisplayName", launcherManagerIdn.getDisplayName());
				identityModel.put("launcherManagerDisplayName", launcherManagerIdn.getDisplayName());
			}
		}

		Map variables = new HashMap();
		variables.put("firstName", identityModel.get("firstName"));
		variables.put("lastName", identityModel.get("lastName"));
		variables.put("identityModel", identityModel);
		variables.put("identityRequestId", identityRequestId);
		variables.put("launcherManagerDisplayName", identityModel.get("launcherManagerDisplayName"));
		variables.put("requesterDisplayName", resolveDisplayName(launcher));
    wfcontext.setVariable("requesterDisplayName", resolveDisplayName(launcher));
	  ]]></Source>
    </Script>
    <Transition to="Manager Approval"/>
  </Step>
  <Step icon="Approval" name="Manager Approval" posX="1238">
    <Approval mode="serial" owner="ref:launcherManager" return="requestRejected,identityModel" send="approvalSet,identityDisplayName,identityName,identityModel,requesterDisplayName">
      <AfterScript>
        <Source><![CDATA[
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.*;
   		  String approvalStatus = null;     
   		  ApprovalSet set = approvalSet;
   		  List items = approvalSet.getItems();
		  String firstName=identityModel.get("firstName");
		  String lastName=identityModel.get("lastName");
		  List comments = new ArrayList();
		  
		  log.debug("Approver Comments :"+ requestRejected);
		  
		  if(identityModel.get("managerComments")!=null){
		  	Comment cmt = new Comment(identityModel.get("managerComments").toString(), identityModel.get("launcherManagerDisplayName"));
		  	comments.add(cmt);
		  }
		  if(approval.getCompletionState().toString().equals("Finished")){
        		if(requestRejected != null && requestRejected.equals("true")){
            		approvalStatus = "REJECTED";
					for(ApprovalItem item : items){
						item.setComments(comments);
						item.reject();
					}
            	}else{
            		approvalStatus = "APPROVED";
					for(ApprovalItem item : items){
						item.setComments(comments);
						item.approve();
					}
        		}
        	}	
        	
            IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);
            auditDecisions(item);
        ]]></Source>
      </AfterScript>
      <Arg name="workItemType" value="Approval"/>
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId"/>
      <Arg name="workItemElectronicSignature" value="ref:managerElectronicSignature"/>
      <Arg name="workItemRequester" value="$(launcher)"/>
      <Arg name="workItemDescription">
        <Script>
          <Source><![CDATA[
        	String value="Manager Approval - new sponsored account creation request :";
        	value= value + identityModel.get("firstName")+" "+ identityModel.get("lastName");
            return value;
          ]]></Source>
        </Script>
      </Arg>
      <Arg name="workItemNotificationTemplate" value="COB-EmailTemplate-SponsorAcctCreation-Manager-Approval"/>
      <Arg name="workItemTargetClass" value="sailpoint.object.Identity"/>
      <Arg name="workItemTargetName">
        <Script>
          <Source><![CDATA[
             return id.getName();
          ]]></Source>
        </Script>
      </Arg>
      <Arg name="workItemPriority" value="ref:priority"/>
      <Arg name="workItemForm" value="COB-Form-CreateContractor-Manager-Approval"/>
      <Arg name="requesterEmail" value="ref:requesterEmail"/>
      <Arg name="workItemFormBasePath" value="ref:basePath"/>
    </Approval>
    <Arg name="requesterDisplayName" value="ref:requesterDisplayName"/>
    <Description>
      This approval step adds first layer of approval to prevent duplicate creator account creation.
    </Description>
    <Transition to="Clean up new identity if request rejected" when="script: return requestRejected"/>
    <Transition to="UpdateProvisioningPlan"/>
  </Step>
  <Step name="Clean up new identity if request rejected">
    <Arg name="id" value="ref:id"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="launcherEmail" value="ref:launcherEmail"/>
    <Script>
      <Source><![CDATA[
  import sailpoint.object.*;
  import sailpoint.api.*;
  
      //send rejection email to the requestor
        String rejectEmailTemplate = "COB-EmailTemplate-ManagerApproval-Rejected";
			
      EmailTemplate managerRejectEmailTemplate = context.getObjectByName(EmailTemplate.class,rejectEmailTemplate);

      Map variables = new HashMap();
      variables.put("identityModel", identityModel);
        
	    EmailOptions emailOptions= new EmailOptions();
      emailOptions.setVariables(variables);
      emailOptions.setTo(launcherEmail);
      emailOptions.setSendImmediate(true);
     
        
      context.sendEmailNotification(managerRejectEmailTemplate, emailOptions);
     
		
		
			log.warn("Rejection Email Sent");
      
        
  Identity newIdent =context.getObjectByName(Identity.class,identityModel.get("sAMAccountName"));
  if(newIdent == null){
  log.warn("Identity associated with this sponsor account not found.");
  }else{
  sailpoint.api.Terminator terminator = new sailpoint.api.Terminator(context);
   terminator.deleteObject(newIdent);
   log.debug("The identity has been deleted from IIQ.");
  }
  
  
  ]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step name="UpdateProvisioningPlan" posX="1182" posY="342" resultVariable="updatedPlan" wait="1">
    <Arg name="plan" value="ref:plan"/>
    <Arg name="baseDN" value="ref:baseDN"/>
    <Arg name="id" value="ref:id"/>
    <Arg name="isBPSRequest" value="ref:isBPSRequest"/>
    <Arg name="hdapBaseDN" value="ref:hdapBaseDN"/>
    <Arg name="bpsBaseDN" value="ref:bpsBaseDN"/>
    <Script>
      <Source><![CDATA[
      
  import sailpoint.object.*;
  import sailpoint.api.*;
  import sailpoint.tools.*;
  
  
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";

	
		String firstName = identityModel.get("firstName");
		String lastName = identityModel.get("lastName");
		String sAMAccountName ="";
		sAMAccountName=generateUniqueSAMAccountName("Dev_CityHall_AD",firstName, lastName, context);
        String mail="";
        String emailRequired= identityModel.get("cobEmailRequired");
        if(emailRequired.equalsIgnoreCase("Yes")){
        mail=generateUniqueEmailAddress("Dev_CityHall_AD",firstName,lastName,context);
        }else{
        mail= (String) identityModel.get("companyEmail");
        wfcontext.setVariable("email", mail);
        }
        System.out.println("email::"+mail);
        AccountRequest acctReqAD;
        if(isBPSRequest){
        sAMAccountName=generateUniqueSAMAccountName("Dev_BPS_AD",firstName, lastName, context);
        mail=generateUniqueEmailAddress("Dev_BPS_AD",firstName,lastName,context);
        wfcontext.setVariable("email", mail);
        acctReqAD = plan.getAccountRequests("Dev_BPS_AD").iterator().next();
		acctReqAD.setNativeIdentity("cn="+sAMAccountName+bpsBaseDN);
		acctReqAD.add(new AttributeRequest("sAMAccountName",sAMAccountName));
		acctReqAD.add(new AttributeRequest("distinguishedName", "cn="+sAMAccountName+bpsBaseDN));
		String host=getADHost("Dev_BPS_AD", context);
		String userPrincipalName = sAMAccountName + "@" + host;
		if (userPrincipalName != null) {
			acctReqAD.add(new AttributeRequest("userPrincipalName",userPrincipalName));
		}
		
        acctReqAD.add(new AttributeRequest("mail",mail));
       
       }else{
        
       acctReqAD = plan.getAccountRequests("Dev_CityHall_AD").iterator().next();
		acctReqAD.setNativeIdentity("cn="+sAMAccountName+baseDN);
		acctReqAD.add(new AttributeRequest("sAMAccountName", sAMAccountName));
		acctReqAD.add(new AttributeRequest("distinguishedName","cn="+sAMAccountName+baseDN));
		 String host=getADHost("Dev_CityHall_AD", context);
		String userPrincipalName = sAMAccountName + "@" + host;
		if (userPrincipalName != null) {
			acctReqAD.add(new AttributeRequest("userPrincipalName",userPrincipalName));
		}
		
        acctReqAD.add(new AttributeRequest("mail", mail));
        
        
        
        }
         //create HDAP account
        ProvisioningPlan.AccountRequest hdapAcctReq= new ProvisioningPlan.AccountRequest();
        hdapAcctReq.setOperation(sailpoint.object.ProvisioningPlan.AccountRequest.Operation.Create);
        hdapAcctReq.setApplication("Dev_HDAP");
        hdapAcctReq.setNativeIdentity("cn="+sAMAccountName+hdapBaseDN);
        List objClassList= new ArrayList();
        objClassList.add("COBCustomobject");
        objClassList.add("inetorgperson");
        objClassList.add("person");
        objClassList.add("top");
        objClassList.add("organizationalPerson");
        objClassList.add("orclUserV2");
         

        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("CN",sAMAccountName));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("userPassword",identityModel.get("defaultPassword")));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("dn","cn="+sAMAccountName+hdapBaseDN));
        
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("departmentNumber", identityModel.get("deptCode")));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("displayName",identityModel.get("firstName")+" "+identityModel.get("lastName")));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("employeeType",identityModel.get("accountType")));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("givenName",identityModel.get("firstName")));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("mail", mail));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("SN", identityModel.get("lastName")));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("uid",sAMAccountName));
        hdapAcctReq.add(new ProvisioningPlan.AttributeRequest("objectClass",objClassList));
        
        wfcontext.setVariable("sAMAccountName", sAMAccountName);
		List lAccreqs = new ArrayList();
		lAccreqs.add(acctReqAD);
        lAccreqs.add(hdapAcctReq);

		ProvisioningPlan updatedPlan = new ProvisioningPlan();

		updatedPlan.setAccountRequests(lAccreqs);
		return updatedPlan;
      ]]></Source>
    </Script>
    <Transition to="UpdateIdentity"/>
  </Step>
  <Step icon="Default" name="UpdateIdentity" posX="521" posY="196" resultVariable="id">
    <Arg name="email" value="ref:email"/>
    <Script>
      <Source><![CDATA[
import sailpoint.object.Identity;

		String logPrefix = workflowLogPrefix + "::" + wfcontext.getStep().getName() + "::";
		String tempSAMAccountName = id.getName();
		Identity identity;
		if (context.getObjectByName(Identity.class, tempSAMAccountName) == null) {
			Identity newIdentity = new Identity();
			newIdentity.setName(sAMAccountName);
			newIdentity.setAttribute("firstname", id.getAttribute("firstname"));
			newIdentity.setAttribute("lastname", id.getAttribute("lastname"));
			newIdentity.setManager(id.getManager());
      newIdentity.setEmail(email);
			newIdentity.setPassword(id.getPassword());
			context.saveObject(newIdentity);
			identity = newIdentity;
		} else {
			id.setName(sAMAccountName);
      id.setEmail(email);
			context.saveObject(id);
			identity = id;
		}
		context.commitTransaction();
		//
		return identity;
      ]]></Source>
    </Script>
    <Transition to="CompileUpdatedProvisioningProject"/>
  </Step>
  <Step action="compileProvisioningProject" icon="Default" name="CompileUpdatedProvisioningProject" posX="779" posY="277" resultVariable="updatedProject">
    <Arg name="project"/>
    <Arg name="plan" value="ref:updatedPlan"/>
    <Arg name="identityName">
      <Script>
        <Source><![CDATA[
             return id.getName();
          ]]></Source>
      </Script>
    </Arg>
    <Transition to="ProvisionProject"/>
  </Step>
  <Step icon="Default" name="ProvisionProject" posX="526" posY="16">
    <Arg name="identityName">
      <Script>
        <Source><![CDATA[
             return id.getName();
          ]]></Source>
      </Script>
    </Arg>
    <Arg name="disableIdentityRequests"/>
    <Arg name="project" value="ref:updatedProject"/>
    <Arg name="maxRetries"/>
    <Arg name="provisioningRetryThreshold"/>
    <Arg name="plan" value="ref:updatedPlan"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="retryProject"/>
    <Arg name="retries"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Description>Call a sub process to provision</Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Provision with retries"/>
    </WorkflowRef>
    <Transition to="AuditProvision"/>
  </Step>
  <Step icon="Audit" name="AuditProvision" posX="425" posY="104">
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="project" value="ref:updatedProject"/>
    <Arg name="source" value="COB-Workflow-Create-Sponsored-Accounts"/>
    <Arg name="identityName">
      <Script>
        <Source><![CDATA[
             return id.getName();
          ]]></Source>
      </Script>
    </Arg>
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");

		Identity idn = context.getObject(Identity.class, identityName);
		cobProvisioningAuditLog(logPrefix, source, launcher, project, idn);

		cobLog(logPrefix, "Exit Step");
		]]></Source>
    </Script>
    <Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity" posX="1381" posY="102">
    <Arg name="refreshLinks" value="true"/>
    <Arg name="forceLinkAttributePromotion" value="true"/>
    <Arg name="identityName">
      <Script>
        <Source><![CDATA[
             return id.getName();
          ]]></Source>
      </Script>
    </Arg>
    <Arg name="promoteAttributes" value="true"/>
    <Arg name="processTriggers" value="false"/>
    <Description>
      Add arguments as necessary to enable refresh features.  Typically you
      only want this to correlate roles.  Don't ask for provisioning  since that
      can result in provisioning policies that need to be presented and it's
      too late for that.  This is only to get role detection and exception
      entitlements in the cube.
    </Description>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="994" posY="107" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="autoVerify" value="true"/>
    <Transition to="Send Notifications"/>
  </Step>
  <Step name="Send Notifications" posX="1130" posY="107">
    <Arg name="identityName">
      <Script>
        <Source><![CDATA[
             return id.getName();
          ]]></Source>
      </Script>
    </Arg>
    <Arg name="requesterDisplayName" value="ref:requesterDisplayName"/>
    <Arg name="requestor" value="ref:launcher"/>
    <Arg name="identityModel" value="ref:identityModel"/>
    <Script>
      <Source><![CDATA[
	  	import java.util.*;
		import sailpoint.object.EmailTemplate;
		import sailpoint.object.EmailOptions;
		import java.util.Map;
		import java.util.HashMap;
		import java.text.DateFormat;
		import java.text.SimpleDateFormat;		
		import sailpoint.object.*;
		import sailpoint.server.Auditor;

		String logPrefix = workflow.getName() + "::" + identityName + "::" + wfcontext.getStep().getName() + "::";

		Identity user = context.getObject(Identity.class, identityName);
    String requestorEmail="";
    String managerDisplayName = "";
		List emails = new ArrayList();
		Identity manager=context.getObjectByName(Identity.class,identityModel.get("sponsorManager"));
		if (manager != null) {
      managerDisplayName=manager.getDisplayName();
			String managerEmail = (String) manager.getAttribute("email");
			emails.add(managerEmail);
		}

		if (requestor != null) {
			Identity requestorIdn = context.getObject(Identity.class, requestor);
			if (requestorIdn != null) {
				if (requestorIdn.getAttribute("email") != null) {
			      requestorEmail = (String) requestorIdn.getAttribute("email");
					if (requestorEmail != null) {
						emails.add(requestorEmail);
					}
				}
			}
		}

		Map variables = new HashMap();
    variables.put("managerDisplayName",managerDisplayName);
    variables.put("identityModel", identityModel);
    variables.put("accountType", identityModel.get("accountType"));
		variables.put("firstName", identityModel.get("firstName"));
		variables.put("lastName", identityModel.get("lastName"));
		if(isBPSRequest){
        variables.put("userName", "selbmum" + "\\" + sAMAccountName);
        }else{
		variables.put("userName", "IAM-AD-DEV" + "\\" + sAMAccountName);
        }
		variables.put("email", identityModel.get("email"));
		variables.put("endDate", identityModel.get("contractEndDate"));
		variables.put("userPassword", identityModel.get("defaultPassword"));
		variables.put("requesterDisplayName", requesterDisplayName);
		//variables.put("defaultSecurityMessage", wfcontext.getVariable("defaultSecurityMessage"));

		boolean sendEmail = false;
		if (Util.size(user.getLinks()) != 0) {
			sendEmail = true;
		}

		if (sendEmail) {
			String accountInfoTemplate = "COB-EmailTemplate-EmployeeAcctInfo";
			String passwordInfoTemplate = "COB-EmailTemplate-EmployeeAcct-ADPassword";
      String confirmationEmailTemplate="COB-EmailTemplate-SponsoredAccount-Creation-Success";
        
      EmailTemplate infoEmailTemplate = context.getObjectByName(EmailTemplate.class,accountInfoTemplate);
      EmailTemplate pswdEmailTemplate = context.getObjectByName(EmailTemplate.class,passwordInfoTemplate);
      EmailTemplate confirmEmailTemplate = context.getObjectByName(EmailTemplate.class,confirmationEmailTemplate);

        
		  EmailOptions emailOptions= new EmailOptions();
      emailOptions.setVariables(variables);
      emailOptions.setTo(emails);
      emailOptions.setSendImmediate(true);
        
       EmailOptions emailOptions2= new EmailOptions();
      emailOptions2.setVariables(variables);
      emailOptions2.setTo(requestorEmail);
      emailOptions2.setSendImmediate(true);
        
      context.sendEmailNotification(infoEmailTemplate, emailOptions);
      context.sendEmailNotification(pswdEmailTemplate, emailOptions);
      context.sendEmailNotification(confirmEmailTemplate, emailOptions2);
		}
		
			log.warn("Email Sent");
	  ]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step name="end"/>
  <Step catches="complete" icon="Catches" name="HandleException" posX="37" posY="690">
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		try {
	            cobLog(logPrefix, "EnterStep");
				if(!wfcontext.getWorkflowCase().getErrors().isEmpty()){
				sendErrorEmailFromWorkflow(wfcontext);
				}
				cobLog(logPrefix, "ExitStep");
			}
		 catch (Throwable e) {
			cobLog(logPrefix, "Exception:");
			e.printStackTrace();
		}
	  ]]></Source>
    </Script>
  </Step>
</Workflow>
