<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity" name="COB-Workflow-Leaver" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event" transient="true">
    <Description>
      The IdentityChangeEvent.  It can be used to build
      the provisioning plan, but does not need to be
      persisted with the case, so marked as transient.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan, which is built by a service method. </Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the results of the request.
    </Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>
      String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.
    </Description>
  </Variable>
  <Variable initializer="false" input="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled version of the ProvisioningPlan.
    </Description>
  </Variable>
  <Variable name="identityRequestId" output="true">
    <Description>
       The sequence id of the Identity request object which is stored in 
       the name field of the identity request.
    </Description>
  </Variable>
  <Variable name="cart" output="true">
    <Description>
       This variable includes all ApprovalItems that are part of 
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions 
       and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable initializer="Normal" input="true" name="workItemPriority">
    <Description>
       The String version of a WorkItem.Priority. This variable is 
       used to set the priority on all of the workitems generated 
       as part of this workflow and also set on the IdentityRequest
       object.
    </Description>
  </Variable>
  <Description>Disable all accounts when an employee leaves the company.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-AuditRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-SpAcctProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step name="Start">
    <Transition to="Check Links"/>
  </Step>
  <Step name="Check Links" resultVariable="isProcessLeaver">
    <Arg name="identityName" value="ref:identityName"/>
    <Script>
      <Source><![CDATA[
    import sailpoint.object.*;
    
     Identity ident=context.getObjectById(Identity.class,identityName);
     boolean isProcessLeaver=false;
     if(ident != null){
      if(ident.getLinks().size() > 1){
    
       
         isProcessLeaver=true;
    }
    }
        
        
        return isProcessLeaver;
    
    
    ]]></Source>
    </Script>
    <Transition to="Build Plan" when="isProcessLeaver"/>
    <Transition to="end"/>
  </Step>
  <Step icon="Task" name="Build Plan" posX="276" posY="107" resultVariable="plan">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="suspensionDate">
      <Script>
        <Source><![CDATA[
        import java.util.Date;
        
        Date date = new Date();
        return date;
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="ident">
      <Script>
        <Source><![CDATA[
          import sailpoint.object.Identity;
          
         Identity ident=context.getObjectById(Identity.class,identityName);
                
        return ident;
        ]]></Source>
      </Script>
    </Arg>
    <Description>Go through all of the user's links and build a plan.</Description>
    <Script>
      <Source><![CDATA[

        import sailpoint.object.*;
        import sailpoint.api.*;
        
        
        
      
        //Create provisioning plan to reset passwords in the respective applications
        
        wfcontext.setVariable("identityName", ident.getName());
		boolean isBPSRequest = isBPSRequest(ident);
		Application bpsAdAPP = context.getObjectByName(Application.class, "Dev_BPS_AD");
		Application adAPP = context.getObjectByName(Application.class, "Dev_CityHall_AD");
		Application hdapAPP = context.getObjectByName(Application.class, "Dev_HDAP");
		IdentityService idService = new IdentityService(context);
		List adLinks = idService.getLinks(ident, adAPP);
		String adNative = "";
		List bpsAdLinks = idService.getLinks(ident, bpsAdAPP);
		String bpsAdNative = "";
		String hdapNative = "";
		List adGroups = new ArrayList();
		List bpsADGroups = new ArrayList();
		List hdapLinks = idService.getLinks(ident, hdapAPP);
		if (!adLinks.isEmpty()) {
			for (Link adLink : adLinks) {
				adNative = adLink.getNativeIdentity();
				// Get City Hall AD Groups
				adGroups = adLink.getAttributes().getList("memberOf");
				break;
			}
		}
		if (!bpsAdLinks.isEmpty()) {
			for (Link bpsAdLink : bpsAdLinks) {
				bpsAdNative = bpsAdLink.getNativeIdentity();
				// Get BPS AD Groups
				bpsADGroups = bpsAdLink.getAttributes().getList("memberOf");
				break;
			}
		}
		if (!hdapLinks.isEmpty()) {
			for (Link hdapLink : hdapLinks) {
				hdapNative = hdapLink.getNativeIdentity();
			}
		}
		ProvisioningPlan plan = new ProvisioningPlan();
		plan.setIdentity(ident);
		List acctReqs = new ArrayList();

		if (!adLinks.isEmpty() || !bpsAdLinks.isEmpty()) {
			// create AD Account Request
			ProvisioningPlan.AccountRequest acctReqAD = new ProvisioningPlan.AccountRequest();
			acctReqAD.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
			if (isBPSRequest) {
				acctReqAD.setApplication("Dev_BPS_AD");
				acctReqAD.setNativeIdentity(bpsAdNative);
				// Add attribute request to remove the BPS AD group
				// memberships
				for (String eachGrp : bpsADGroups) {
					acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf", ProvisioningPlan.Operation.Remove,
							eachGrp));
				}
			} else {
				acctReqAD.setApplication("Dev_CityHall_AD");
				acctReqAD.setNativeIdentity(adNative);
				// Add attribute request to remove the CityHall AD group memberships
				for (String eachGrp : adGroups) {
					acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf", ProvisioningPlan.Operation.Remove,eachGrp));
				}

			}
			// Move the user account to 'Disabled' OU
			//acctReqAD.add(new ProvisioningPlan.AttributeRequest("AC_NewParent", "OU=Disabled,DC=domain,DC=com"));
			acctReqAD.add(new AttributeRequest("extensionAttribute5", "VFE"));
			acctReqAD.add(new ProvisioningPlan.AttributeRequest("IIQDisabled", "true"));
			acctReqs.add(acctReqAD);
		}
		// create HDAP Account Request
		if (!hdapLinks.isEmpty()) {
			ProvisioningPlan.AccountRequest acctReqHDAP = new ProvisioningPlan.AccountRequest();
			acctReqHDAP.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
			acctReqHDAP.setApplication("Dev_HDAP");
			acctReqHDAP.setNativeIdentity(hdapNative);
			acctReqHDAP.add(new ProvisioningPlan.AttributeRequest("IIQDisabled", "true"));
			acctReqHDAP.add(new ProvisioningPlan.AttributeRequest("orclisdisabled", "DISABLED"));
			acctReqs.add(acctReqHDAP);
		}
		// create PeopleSoft FIN Account Request if the leaver has a financials account
		boolean hasFinAcct= hasFinAcct(identityName);
		String finAppName="Dev_PeopleSoftFinancials";
		if(hasFinAcct){
			String finNativeIdent =  getNativeIdentity(identityName,finAppName);
			ProvisioningPlan.AccountRequest acctReqFIN = new ProvisioningPlan.AccountRequest();
			acctReqFIN.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
			acctReqFIN.setApplication(finAppName);
			acctReqFIN.setNativeIdentity(finNativeIdent);
			acctReqFIN.add(new ProvisioningPlan.AttributeRequest("IIQDisabled", "true"));
			acctReqFIN.add(new ProvisioningPlan.AttributeRequest("AccountLocked", "1"));
			acctReqs.add(acctReqFIN);
		}

		java.text.DateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");
		String termDateStr = dateFormat.format(suspensionDate);
		ident.setAttribute("cobTermDate", termDateStr);
		ident.setDisabled(true);
		ident.setInactive(true);
		context.saveObject(ident);
		context.commitTransaction();

		plan.setAccountRequests(acctReqs);
		return plan;


   ]]></Source>
    </Script>
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize" posX="170" posY="10">
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="flow" value="Lifecycle"/>
    <Description>
      Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into 
       project and checking policy violations.
    </Description>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="cart"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="policyViolations" to="policyViolations"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Provision"/>
  </Step>
  <Step icon="Task" name="Provision" posX="290" posY="10">
    <Arg name="approvalScheme" value="ref:approvalScheme"/>
    <Arg name="fallbackApprover" value="ref:fallbackApprover"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Changes"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="trace" value="ref:trace"/>
    <Description>
      Call the standard subprocess that will process the 
      approval decisions and do provisioning.  This
      includes calling any configured provisioning 
      connectors and building manual actions.
    </Description>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision"/>
    </WorkflowRef>
    <Transition to="Finalize"/>
  </Step>
  <Step icon="Task" name="Finalize" posX="410" posY="10">
    <Arg name="approvalSet" value="ref:cart"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Description>
      Call the standard subprocess that can audit/finalize the request.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Finalize"/>
    </WorkflowRef>
    <Transition to="Audit_Event"/>
  </Step>
  <Step icon="Task" monitored="true" name="Audit_Event">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="COB-Workflow-Leaver"/>
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");

		Identity idn = context.getObject(Identity.class, identityName);
		cobProvisioningAuditLog(logPrefix, source, identityName, project, idn);

		cobLog(logPrefix, "Exit Step");
		]]></Source>
    </Script>
    <Transition to="Send Email"/>
  </Step>
  <Step name="Send Email">
    <Arg name="templateName" value="COB-EmailTemplate-TerminateIdentity"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="suspendedIdentity">
      <Script>
        <Source><![CDATA[
      import sailpoint.object.Identity;
        
        Identity ident=context.getObjectByName(Identity.class,identityName);
        return ident;

        
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="identityDisplayName">
      <Script>
        <Source><![CDATA[
        import sailpoint.object.Identity;
        
        return suspendedIdentity.getDisplayName();
        
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="to">
      <Script>
        <Source><![CDATA[
  import sailpoint.object.Identity;
  import java.util.ArrayList;
          
          ArrayList toList= new ArrayList();
          Identity launcherIdent= context.getObjectByName(Identity.class,launcher);
          String launcherEmail = launcherIdent.getEmail();
          String suspIdEmail = suspendedIdentity.getEmail();
          String managerEmail="";
          if(suspendedIdentity.getManager() !=null){
          managerEmail = suspendedIdentity.getManager().getEmail();
          }
       
          
          if(managerEmail != null){
          toList.add(managerEmail);
          }
          return toList;
  ]]></Source>
      </Script>
    </Arg>
    <Script>
      <Source><![CDATA[
    import java.util.*;
		import sailpoint.object.EmailTemplate;
		import sailpoint.object.EmailOptions;
		import java.util.Map;
		import java.util.HashMap;
  
      String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";	
      cobLog(logPrefix, "EnterStep");		
      EmailTemplate infoEmailTemplate = context.getObjectByName(EmailTemplate.class,templateName);
     
      EmailOptions emailOptions= new EmailOptions();
      emailOptions.setVariable("identityDisplayName",identityDisplayName);
      emailOptions.setTo(to);
      emailOptions.setSendImmediate(true);
        
      context.sendEmailNotification(infoEmailTemplate, emailOptions);
      cobLog(logPrefix, "ExitStep");
  ]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="540" posY="10"/>
  <Step catches="complete" icon="Catches" name="HandleException" posX="37" posY="690">
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		try {
		
				cobLog(logPrefix, "EnterStep");
				if(!wfcontext.getWorkflowCase().getErrors().isEmpty()){
				sendErrorEmailFromWorkflow(wfcontext);
				}
				cobLog(logPrefix, "ExitStep");
			}
		 catch (Throwable e) {
			cobLog(logPrefix, "Exception:");
			e.printStackTrace();
		}
	
       ]]></Source>
    </Script>
  </Step>
</Workflow>
