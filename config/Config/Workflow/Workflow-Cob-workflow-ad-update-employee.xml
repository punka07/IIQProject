<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity" name="COB-Workflow-AD-Update-Employee" type="Subprocess">
  <Variable input="true" name="project" output="true">
    <Description>Project that will be provisioned.</Description>
  </Variable>
  <Variable input="true" name="identityName"/>
  <Variable input="true" name="source"/>
  <Variable input="true" name="launcher"/>
  <Variable name="plan">
    <Description>The provisioning plan which is built during the workflow</Description>
  </Variable>
  <Variable input="true" name="email"/>
  <Variable input="true" name="changedAttrMap"/>
  <Variable input="true" name="isBPSEmployee"/>
  <Variable name="result"/>
  <Variable name="LCMEvent"/>
  <Variable initializer=",ou=Room 708,ou=DoIT,ou=CoB,dc=IAM-AD-Dev,dc=cob" name="baseDN"/>
  <Variable name="bpsBaseDN"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-SpAcctProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-AuditRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="17" posY="104" resultVariable="workflowLogPrefix">
    <Script>
      <Source><![CDATA[
      	String workflowLogPrefix = workflow.getName() + "::" + identityName + "::"; 
		return workflowLogPrefix;
	  ]]></Source>
    </Script>
    <Transition to="AD_Update_Plan"/>
  </Step>
  <Step icon="Message" name="AD_Update_Plan" posX="117" posY="104" resultVariable="plan">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="baseDN" value="ref:baseDN"/>
    <Arg name="bpsBaseDN" value="ref:bpsBaseDN"/>
    <Arg name="email" value="ref:email"/>
    <Arg name="defaultPassword" value="ref:defaultPassword"/>
    <Arg name="isBPSEmployee" value="ref:isBPSEmployee"/>
    <Arg name="changedAttrMap" value="ref:changedAttrMap"/>
    <Script>
      <Source><![CDATA[
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import sailpoint.api.SailPointContext;
import sailpoint.object.Identity;
import sailpoint.object.ManagedAttribute;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.workflow.WorkflowContext;

		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");

        Identity ident = context.getObjectByName(Identity.class,identityName);
        String bpsAppName="Dev_BPS_AD";
        String chAppName="Dev_CityHall_AD";
        Application chAppObj =context.getObjectByName(Application.class,chAppName);
        Application bpsAppObj =context.getObjectByName(Application.class,bpsAppName);
        List bpsGrpList=getMemberOfList(ident, bpsAppObj);
        List chGrpList=getMemberOfList(ident, chAppObj);
        String bpsNativeIdent= getNativeIdentity(idetityName,bpsAppName);
        String chNativeIdent=getNativeIdentity(idetityName,chAppName);
        ProvisioningPlan ADplan = new ProvisioningPlan();
        // create AD account
        ProvisioningPlan.AccountRequest acctReqAD = new  ProvisioningPlan.AccountRequest();
        acctReqAD.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
        if(isBPSEmployee) {
            acctReqAD.setApplication("Dev_BPS_AD");
            acctReqAD.setNativeIdentity(bpsNativeIdent);
            if(bpsGrpList != null){
            	for(String eachGrp: bpsGrpList){
            		acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",ProvisioningPlan.Operation.Remove,eachGrp));
          	  }
            }
           
         }else{

            acctReqAD.setApplication("Dev_CityHall_AD");
            acctReqAD.setNativeIdentity(chNativeIdent);
            acctReqAD.add(new ProvisioningPlan.AttributeRequest("distinguishedName",chNativeIdent));
           
            if(chGrpList != null){
            	for(String eachGrp: chGrpList){
            		acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",ProvisioningPlan.Operation.Remove,eachGrp));
          	  }
            }
        }
        if(changedAttrMap.containsKey("firstName")){
        acctReqAD.add(new ProvisioningPlan.AttributeRequest("givenName",changedAttrMap.get("firstName")));
        }
        if(changedAttrMap.containsKey("lastName")){
        acctReqAD.add(new ProvisioningPlan.AttributeRequest("sn",changedAttrMap.get("lastName")));
        }
        if(changedAttrMap.containsKey("displayName")){
        acctReqAD.add(new ProvisioningPlan.AttributeRequest("displayName",changedAttrMap.get("displayName")));
        }
        if(changedAttrMap.containsKey("deptCode")){
        String grpName=getDeptADGroup(deptCode);
        acctReqAD.add(new ProvisioningPlan.AttributeRequest("memberOf",grpName)); 
        }

		List lAccreqs = new ArrayList();
		lAccreqs.add(acctReqAD);

		ADplan.setAccountRequests(lAccreqs);
		ADplan.setIdentity(ident);
		return ADplan;
		]]></Source>
    </Script>
    <Transition to="Provision_Project"/>
  </Step>
  <Step action="compileProvisioningProject" icon="Default" name="Provision_Project" posX="267" posY="104" resultVariable="project">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="noApplicationTemplates" value="true"/>
    <Arg name="requireCreateTemplates" value="false"/>
    <Arg name="optimisticProvisioning" value="false"/>
    <Arg name="source" value="UI"/>
    <Arg name="requester" value="spadmin"/>
    <Arg name="noLocking" value="true"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="258" posY="100">
    <Arg name="project" value="ref:project"/>
    <Arg name="background" value="false"/>
    <Transition to="ProvisioningResults"/>
  </Step>
  <Step icon="Default" name="ProvisioningResults" posX="557" posY="24">
    <Script>
      <Source><![CDATA[
import sailpoint.tools.Util;
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");
		cobLog(logPrefix, "wfcontext.getStep().getName()=" + wfcontext.getStep().getName());
		if (!Util.isEmpty(wfcontext.getRootWorkflowCase().getMessages())) {
			for (Object msgObj : wfcontext.getRootWorkflowCase().getMessages()) {
				sailpoint.tools.Message msg = (sailpoint.tools.Message) msgObj;
				log.warn(logPrefix+msg.getMessage());
			}
		} 
   	]]></Source>
    </Script>
    <Transition to="Audit_Create"/>
  </Step>
  <Step icon="Audit" name="Audit_Create" posX="567" posY="104">
    <Arg name="source" value="ref:source"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="project" value="ref:project"/>
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");
		Identity idn = context.getObject(Identity.class, identityName);
		cobProvisioningAuditLog(logPrefix, source, launcher, project, idn);
		cobLog(logPrefix, "Exit Step");
	]]></Source>
    </Script>
    <Transition to="End"/>
  </Step>
  <Step icon="Stop" name="End" posX="717" posY="104"/>
  <Step catches="complete" icon="Catches" name="HandleException" posX="37" posY="690">
    <Script>
      <Source><![CDATA[
		  
		   String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		   try {
	            cobLog(logPrefix, "EnterStep");
				if(!wfcontext.getWorkflowCase().getErrors().isEmpty()){
				sendErrorEmailFromWorkflow(wfcontext);
				}
				cobLog(logPrefix, "ExitStep");
			}
		 catch (Throwable e) {
			cobLog(logPrefix, "Exception:");
			e.printStackTrace();
		}
	  
	  ]]></Source>
    </Script>
  </Step>
</Workflow>
