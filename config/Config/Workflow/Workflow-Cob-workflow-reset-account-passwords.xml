<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="COB-Workflow-Reset-Account-Passwords" type="IdentityLifecycle">
  <Variable initializer="string:true" name="transient"/>
  <Variable name="launcher"/>
  <Variable name="launcherIdentity">
    <Script>
      <Source><![CDATA[
      import sailpoint.object.Identity;
      import sailpoint.tools.*;
      
      Identity launcherIdentity = context.getObjectByName(Identity.class,launcher);
      return launcherIdentity;
      ]]></Source>
    </Script>
  </Variable>
  <Variable name="launcherDisplayName">
    <Script>
      <Source><![CDATA[
      import sailpoint.object.Identity;
      import sailpoint.tools.*;

      return launcherIdentity.getDisplayName();
      ]]></Source>
    </Script>
  </Variable>
  <Variable name="currentUserName"/>
  <Variable initializer="string:false" name="trace"/>
  <Description>Workflow to reset account passwords.
	</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-AuditRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-SpAcctProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" resultVariable="workflowLogPrefix">
    <Script>
      <Source><![CDATA[
		String workflowLogPrefix = workflow.getName() + "::" + launcher + "::";
		return workflowLogPrefix;
	  ]]></Source>
    </Script>
    <Transition to="UserForm"/>
  </Step>
  <Step icon="Message" name="UserForm" posX="115" posY="10">
    <Approval name="Password Reset-Form" owner="ref:launcher" return="newSecret,requestCancelled" send="account,launcher,launcherDisplayName,currentUserName,errorMessage,launcherIdentity">
      <Form name="Password Reset-Form">
        <Attributes>
          <Map>
            <entry key="pageTitle">
              <value>
                <Script>
                  <Source><![CDATA[
                return "Reset Password for " + launcherDisplayName;
                ]]></Source>
                </Script>
              </value>
            </entry>
          </Map>
        </Attributes>
        <Button action="next" label="Next"/>
        <Button action="back" label="Exit" parameter="requestCancelled" value="true"/>
        <Section columns="1" type="text">
          <Attributes>
            <Map>
              <entry key="hidden">
                <value>
                  <Script>
                    <Source><![CDATA[
	                return sailpoint.tools.Util.isNullOrEmpty(errorMessage);
	                ]]></Source>
                  </Script>
                </value>
              </entry>
            </Map>
          </Attributes>
          <Field displayName="Error" name="errorMessage">
            <Attributes>
              <Map>
                <entry key="fieldStyle">
                  <value>
                    <Script>
                      <Source><![CDATA[
		java.util.Map map = new java.util.HashMap();
		map.put("color", "red");
		sailpoint.object.Attributes attr = new sailpoint.object.Attributes(map);
		return attr;
                      ]]></Source>
                    </Script>
                  </value>
                </entry>
              </Map>
            </Attributes>
          </Field>
        </Section>
        <Section name="Instructions" type="datatable">
          <Field displayName="Password Policy" name="pswdPolicy">
            <Script>
              <Source><![CDATA[
      return "Password must have at most 8 character(s),"+"<br>"+ "Password must have at least 1 digit(s),"+"<br>"+"Password must have at least 1 uppercase letter(s),"+"<br>"+
       "Password must have at least 1 lowercase letter(s),"+"<br>"+"Password must have at least 1 special character(s)"+"<br>"+"Cannot reuse any of your last 5 passwords.";
        ]]></Source>
            </Script>
          </Field>
        </Section>
        <Section columns="1" label="">
        <Field displayName="Current Password" name="currentSecret" required="true" type="secret">
         <ValidationScript>
              <Source><![CDATA[
              import sailpoint.object.Identity;
              
              log.warn("value::"+currentSecret);
              String identPassword=context.decrypt(launcherIdentity.getPassword());
              log.warn("identPassword::"+identPassword);
              if(!value.equals(identPassword)){
              	return "The value is not correct";
              
              }
              
              
              ]]></Source>
              </ValidationScript>
        </Field>
          <Field displayName="New Password" name="newSecret" required="true" type="secret">
            <ValidationScript>
              <Source><![CDATA[
         import sailpoint.api.PasswordPolice;
         import sailpoint.api.PasswordPolicyException;
         import sailpoint.object.Identity;
         import sailpoint.object.PasswordPolicy;
         import sailpoint.tools.GeneralException;
         import sailpoint.tools.Message;

        

         try {

            PasswordPolicy policy = context.getObject( PasswordPolicy.class, "COB-Common-Password-Policy" );

        

            if (policy == null) {

               throw new GeneralException("Default Password Policy was not found");

            }

            Identity id = context.getObject(Identity.class, launcher);

            String pwdHistory = id.getPasswordHistory();

            PasswordPolice police = new PasswordPolice(context);

            police.checkPassword(id, policy, field.getValue(), (null != pwdHistory) ? pwdHistory : "");

         } catch (PasswordPolicyException ex) {

            List messages = new ArrayList();

            for (Message msg : ex.getAllMessages()){

              messages.add(msg);

            }

            return messages;

         } catch (GeneralException ex) {

            List messages = new ArrayList();

            Message msg = new Message();

            msg.setKey("Default Password Policy was not found");

            messages.add(msg);

            return messages;

         }

         return null;

              ]]></Source>
            </ValidationScript>
          </Field>
          <Field displayName="Confirm New Password" name="confirmPassword" required="true" type="secret">
            <ValidationScript>
              <Source><![CDATA[
            
            import sailpoint.web.messages.MessageKeys;
            import sailpoint.tools.Message;
  
            List errors = null;
            String pw = newSecret;
            String cPw = confirmPassword;
            if( (pw == null && cPw != null) || (pw != null && cPw == null) || (pw != null && !pw.equals(cPw))) {
                errors = new ArrayList();
                Message msg = new Message();
                msg.setKey(MessageKeys.ERROR_IDENTITY_CONFIRM_PASS_MISMATCH);
                errors.add(msg);
            }
  
            return errors;
            
          ]]></Source>
            </ValidationScript>
          </Field>
        </Section>
      </Form>
    </Approval>
    <Transition to="end" when="!approved"/>
    <Transition to="BuildPlan"/>
  </Step>
  <Step icon="Default" name="BuildPlan" resultVariable="plan">
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="newSecret" value="ref:newSecret"/>
    <Script>
      <Source><![CDATA[
      
       import sailpoint.object.*;
       import sailpoint.api.*;
        
        
       
       Identity id = context.getObjectByName(Identity.class,launcher);
      
        //enable the account if in disabled state in IIQ
        
        if(id.isDisabled()){
            id.setDisabled(false);
        }
        
        if(id.isInactive()){
        	id.setInactive(false);
        
        }
        
        boolean isBPSRequest= isBPSRequest(id);
        Application bpsAdAPP=context.getObjectByName(Application.class,"Dev_BPS_AD");
        Application adAPP= context.getObjectByName(Application.class,"Dev_CityHall_AD");
        Application hdapAPP= context.getObjectByName(Application.class,"Dev_HDAP");
        IdentityService idService = new IdentityService(context);
        List adLinks= idService.getLinks(id,adAPP);
        String adNative= "";
        List bpsAdLinks= idService.getLinks(id,bpsAdAPP);
        String bpsAdNative="";
        String hdapNative= "";
        List hdapLinks= idService.getLinks(id,hdapAPP);
        if(!adLinks.isEmpty()){
           for(Link adLink: adLinks){
              adNative= adLink.getNativeIdentity();
        
        }
        }
        if(!bpsAdLinks.isEmpty()){
          for(Link bpsAdLink:bpsAdLinks){ 
             bpsAdNative= bpsAdLink.getNativeIdentity();
        }
        }
        if(!hdapLinks.isEmpty()){
          for(Link hdapLink: hdapLinks){
                  hdapNative= hdapLink.getNativeIdentity();
        }
        }
        ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(id);
        List acctReqs= new ArrayList();
		// create AD Account Request
		ProvisioningPlan.AccountRequest acctReqAD = new  ProvisioningPlan.AccountRequest();
		acctReqAD.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
		if(isBPSRequest){
		acctReqAD.setApplication("Dev_BPS_AD");
        acctReqAD.setNativeIdentity(bpsAdNative);
        }else{
        acctReqAD.setApplication("Dev_CityHall_AD");
        acctReqAD.setNativeIdentity(adNative);
        
        }
        acctReqAD.add(new ProvisioningPlan.AttributeRequest("password", ProvisioningPlan.Operation.Set,context.encrypt(newSecret)));
        acctReqs.add(acctReqAD); 
        // create HDAP Account Request
		ProvisioningPlan.AccountRequest acctReqHDAP = new  ProvisioningPlan.AccountRequest();
		acctReqHDAP.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
		acctReqHDAP.setApplication("Dev_HDAP");
        acctReqHDAP.setNativeIdentity(hdapNative);
        acctReqHDAP.add(new ProvisioningPlan.AttributeRequest("userPassword", ProvisioningPlan.Operation.Set,context.encrypt(newSecret)));
        acctReqs.add(acctReqHDAP); 
        //add more below
        id.setPassword(newSecret);
        context.saveObject(id);
        context.commitTransaction();
        
        plan.setAccountRequests(acctReqs);
        return plan;
	  ]]></Source>
    </Script>
    <Transition to="Compile_Plan"/>
  </Step>
  <Step action="compileProvisioningProject" icon="Default" name="Compile_Plan" posX="173" posY="20" resultVariable="project">
    <Arg name="project" value="ref:project"/>
    <Arg name="requester" value="ref:launcher"/>
    <Arg name="source" value="UI"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="noLocking" value="true"/>
    <Arg name="noApplicationTemplates" value="true"/>
    <Arg name="requireCreateTemplates" value="false"/>
    <Arg name="identityName" value="ref:finalIdentityName"/>
    <Arg name="optimisticProvisioning" value="false"/>
    <Transition to="Create Identity Request"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="Create Identity Request" posX="271" posY="20" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="UI"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="identityName" value="ref:finalIdentityName"/>
    <Arg name="flow" value="ref:flow"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="261" posY="12" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="autoVerify" value="true"/>
    <Transition to="Audit_Event"/>
  </Step>
  <Step icon="Default" name="Provision" posX="526" posY="16">
    <Arg name="disableIdentityRequests"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="maxRetries"/>
    <Arg name="provisioningRetryThreshold"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="retryProject"/>
    <Arg name="retries"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Description>Call a sub process to provision</Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Provision with retries"/>
    </WorkflowRef>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step icon="Task" monitored="true" name="Audit_Event">
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="COB-Workflow-Reset-Passwords"/>
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");

		Identity idn = context.getObject(Identity.class, launcher);
		cobProvisioningAuditLog(logPrefix, source, launcher, project, idn);

		cobLog(logPrefix, "Exit Step");
		]]></Source>
    </Script>
    <Transition to="Send Email"/>
  </Step>
  <Step name="Send Email">
    <Arg name="templateName" value="COB-EmailTemplate-ResetAccountPasswords"/>
    <Arg name="launcherIdentity" value="ref:launcherIdentity"/>
    <Arg name="launcherDisplayName" value="ref:launcherDisplayName"/>
    <Arg name="to">
      <Script>
        <Source><![CDATA[
  import sailpoint.object.Identity;
  
return launcherIdentity.getEmail();
  ]]></Source>
      </Script>
    </Arg>
    <Script>
      <Source><![CDATA[
        import java.util.*;
		import sailpoint.object.EmailTemplate;
		import sailpoint.object.EmailOptions;
		import java.util.Map;
		import java.util.HashMap;
  
  	  String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";	
  	  cobLog(logPrefix, "EnterStep");		
      EmailTemplate infoEmailTemplate = context.getObjectByName(EmailTemplate.class,templateName);
     
      EmailOptions emailOptions= new EmailOptions();
      emailOptions.setVariable("launcherDisplayName",launcherDisplayName);
      emailOptions.setTo(to);
      emailOptions.setSendImmediate(true);
        
      context.sendEmailNotification(infoEmailTemplate, emailOptions);
      cobLog(logPrefix, "EnterStep");
  ]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="268" posY="10"/>
  <Step catches="complete" icon="Catches" name="HandleException" posX="37" posY="690">
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		try {
			if (areMessagesPresentInWorkflowCase(wfcontext.getWorkflowCase())) {
				cobLog(logPrefix, "EnterStep");
				
				cobLog(logPrefix, "ExitStep");
			}
		} catch (Throwable e) {
			cobLog(logPrefix, "Exception:");
			e.printStackTrace();
		}
	
       ]]></Source>
    </Script>
  </Step>
</Workflow>
