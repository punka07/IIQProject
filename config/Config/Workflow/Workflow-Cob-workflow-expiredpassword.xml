<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="COB-Workflow-ExpiredPassword" type="IdentityUpdate">
  <Variable input="true" name="violator">
    <Description>The identity that has the violation.</Description>
  </Variable>
  <Variable initializer="script:new sailpoint.object.ProvisioningPlan();" name="plan">
    <Description>The plan that will be built and sent for approval and provisioning.</Description>
  </Variable>
  <Variable initializer="ref:violator" input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="false" input="true" name="trace"/>
  <Variable input="true" name="approvalObject"/>
  <Description>Workflow to handle expired passwords on application accounts.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-AuditRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-ProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="COB-Rule-SpAcctProvisioningRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="cobUtils"/>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step name="Start">
    <Transition to="Build Plan"/>
  </Step>
  <Step icon="Task" name="Build Plan" posX="276" posY="107" resultVariable="plan">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="ident">
      <Script>
        <Source><![CDATA[
          import sailpoint.object.Identity;
          
         Identity ident=context.getObjectById(Identity.class,identityName);
                
        return ident;
        ]]></Source>
      </Script>
    </Arg>
    <Description>Go through all of the user's links and build a plan.</Description>
    <Script>
      <Source><![CDATA[

        import sailpoint.object.*;
        import sailpoint.api.*;
        
        
        
        //Create provisioning plan to disable accounts
        //disable Identity in IIQ
        ident.setInactive(true);
        
        wfcontext.setVariable("identityName",ident.getName());
        boolean isBPSRequest= isBPSRequest(ident);
        Application bpsAdAPP=context.getObjectByName(Application.class,"Dev_BPS_AD");
        Application adAPP= context.getObjectByName(Application.class,"Dev_CityHall_AD");
        IdentityService idService = new IdentityService(context);
        List adLinks= idService.getLinks(ident,adAPP);
        String adNative= "";
        List bpsAdLinks= idService.getLinks(ident,bpsAdAPP);
        String bpsAdNative=""; 
        if(!adLinks.isEmpty()){
           for(Link adLink: adLinks){
              adNative= adLink.getNativeIdentity();
        
        }
        }
        if(!bpsAdLinks.isEmpty()){
          for(Link bpsAdLink:bpsAdLinks){
             bpsAdNative= bpsAdLink.getNativeIdentity();
        }
        }
      
        }
        ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(ident);
        List acctReqs= new ArrayList();
        
        if(!adLinks.isEmpty() || !bpsAdLinks.isEmpty() ){
		// create AD Account Request
		   ProvisioningPlan.AccountRequest acctReqAD = new  ProvisioningPlan.AccountRequest();
		   acctReqAD.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);
		   if(isBPSRequest){
		   acctReqAD.setApplication("Dev_BPS_AD");
        acctReqAD.setNativeIdentity(bpsAdNative);
        }else{
        acctReqAD.setApplication("Dev_CityHall_AD");
        acctReqAD.setNativeIdentity(adNative);
        
        }
        acctReqAD.add(new AttributeRequest(“extensionAttribute5”, “VFE”));
        acctReqs.add(acctReqAD); 
        }
      
        plan.setAccountRequests(acctReqs);
        return plan;


   ]]></Source>
    </Script>
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize" posX="170" posY="10">
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="flow" value="Lifecycle"/>
    <Description>
      Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into 
       project and checking policy violations.
    </Description>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="cart"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="policyViolations" to="policyViolations"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Provision"/>
  </Step>
  <Step icon="Task" name="Provision" posX="290" posY="10">
    <Arg name="approvalScheme" value="ref:approvalScheme"/>
    <Arg name="fallbackApprover" value="ref:fallbackApprover"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Changes"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="trace" value="ref:trace"/>
    <Description>
      Call the standard subprocess that will process the 
      approval decisions and do provisioning.  This
      includes calling any configured provisioning 
      connectors and building manual actions.
    </Description>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision"/>
    </WorkflowRef>
    <Transition to="Finalize"/>
  </Step>
  <Step icon="Task" name="Finalize" posX="410" posY="10">
    <Arg name="approvalSet" value="ref:cart"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Description>
      Call the standard subprocess that can audit/finalize the request.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Finalize"/>
    </WorkflowRef>
    <Transition to="Audit_Event"/>
  </Step>
  <Step icon="Task" monitored="true" name="Audit_Event">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="COB-Workflow-ExpiredPassword"/>
    <Script>
      <Source><![CDATA[
		String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		cobLog(logPrefix, "EnterStep");

		Identity idn = context.getObject(Identity.class, identityName);
		cobProvisioningAuditLog(logPrefix, source, identityName, project, idn);

		cobLog(logPrefix, "Exit Step");
		]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="540" posY="10"/>
  <Step catches="complete" icon="Catches" name="HandleException" posX="37" posY="690">
    <Script>
      <Source><![CDATA[
        
		  
		   String logPrefix = workflowLogPrefix + wfcontext.getStep().getName() + "::";
		   try {
	      cobLog(logPrefix, "EnterStep");
				if(!wfcontext.getWorkflowCase().getErrors().isEmpty()){
				sendErrorEmailFromWorkflow(wfcontext);
				}
				cobLog(logPrefix, "ExitStep");
			}
		 catch (Throwable e) {
			cobLog(logPrefix, "Exception:");
			e.printStackTrace();
		}
	  
	
       ]]></Source>
    </Script>
  </Step>
</Workflow>
